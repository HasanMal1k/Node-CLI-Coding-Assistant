

----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [cli-interface.js] -----

import figlet from "figlet";
import gradient, { teen } from "gradient-string";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import { sendMessage, socket } from './client-server.js'
import readAllFiles from "./readAndCompress.js";

const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));

let isLLMReady = false;
let isProcessingUpload = false;

// Handle different socket events
socket.on('stream_chunk', (chunk) => {
    if(chunk.error){
        console.log(chalk.red.bold("\n CLI detected error:"), chalk.red(chunk.error))
        return
    }
    if(chunk.isComplete){
        console.log(chalk.green.bold("\n Response finished!"))
    } else {
        process.stdout.write(chalk.blueBright(chunk.data))  
    }
})

// For when files are uploaded
socket.on('llm-ready', (data) => {
    isLLMReady = true;
    console.log(chalk.green.bold("\n Success:"), chalk.cyan(data.message));
})

// To check if code files are given as context or no
socket.on('connection-status', (status) => {
    isLLMReady = status.hasCodeFile;
    if (!isLLMReady) {
        console.log(chalk.cyan.bold("\n Status:"), chalk.cyan(status.message));
    }
})

const startApp = async () => {
    console.clear()
    
    const spinner = ora(chalk.cyan('Loading Vita...')).start();
    await sleep(2000);
    spinner.stop();

    figlet('Vita Is Here', async (err, data) => {
        if (err) {
            console.log(chalk.red.bold('Something went wrong'));
            console.log(chalk.red(err));
            return;
        }

        console.clear();
        console.log(teen(data));
        
        console.log(chalk.cyan('\n Any broken code for me to fix ??'));
        console.log(chalk.cyan('Let\'s get started with your code analysis journey!\n'));
        
        await sleep(1000);

        // Main application loop
        while (true) {
            try {
                
                const choices = isLLMReady 
                    ? [
                        chalk.cyan('Ask a question about your code'),
                        chalk.cyan('Upload new code files'), 
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ]
                    : [
                        chalk.cyan('Upload code files (Required first step)'),
                        chalk.cyan('Check status'),
                        chalk.red('Quit')
                      ];

                const { action } = await inquirer.prompt([
                    {
                        type: 'list',
                        name: 'action',
                        message: chalk.cyan('What would you like to do?'),
                        choices: choices,
                        prefix: chalk.cyan('>')
                    }
                ]);

                if (action.includes('Quit')) {
                    console.log(chalk.cyan('Thank you for using Vita! Goodbye!'));
                    process.exit(0);
                }

                if (action.includes('Check status')) {
                    if (isLLMReady) {
                        console.log(chalk.green.bold('Status:'), chalk.cyan('LLM is ready! Your code files are loaded.'));
                    } else {
                        console.log(chalk.cyan.bold('Status:'), chalk.cyan('Waiting for code files to be uploaded.'));
                    }
                    continue;
                }

                if (action.includes('Upload')) {
                    await handleCodeUpload();
                    continue;
                }

                if (action.includes('Ask a question')) {
                    await handleChatMode();
                    continue;
                }

            } catch (error) {
                console.error(chalk.red.bold('An error occurred:'), chalk.red(error.message));
                await sleep(1000);
            }
        }
    });
};

const handleCodeUpload = async () => {
    if (isProcessingUpload) {
        console.log(chalk.cyan('Upload already in progress...'));
        return;
    }

    console.log(chalk.cyan('\nPreparing to upload your code files...'));
    
    const { confirm } = await inquirer.prompt([
        {
            type: 'confirm',
            name: 'confirm',
            message: chalk.cyan('This will scan your current directory and upload all code files. Continue?'),
            default: true,
            prefix: chalk.cyan('?')
        }
    ]);

    if (!confirm) {
        console.log(chalk.cyan('Upload cancelled.'));
        return;
    }

    isProcessingUpload = true;
    const uploadSpinner = ora({
        text: chalk.cyan('Reading and compressing code files...'),
        color: 'cyan',
        spinner: 'dots12'
    }).start();

    try {
        await readAllFiles(process.cwd());
        uploadSpinner.succeed(chalk.green.bold('Code files uploaded successfully!'));
        console.log(chalk.cyan('LLM is processing your code...'));
        
    } catch (error) {
        uploadSpinner.fail(chalk.red.bold('Failed to upload code files'));
        console.error(chalk.red('Error:'), chalk.red(error.message));
    } finally {
        isProcessingUpload = false;
    }
};

const handleChatMode = async () => {
    if (!isLLMReady) {
        console.log(chalk.red.bold('Please upload code files first!'));
        return;
    }

    console.log(chalk.cyan('Entering Chat Mode...'));
    console.log(chalk.cyan.bold('Chat Mode'), chalk.cyan('- Ask questions about your code'));
    console.log(chalk.cyan('Type "back" to return to menu\n'));

    while (true) {
        const { query } = await inquirer.prompt([
            {
                type: 'input',
                name: 'query',
                message: chalk.cyan('Your question:'),
                prefix: chalk.cyan('>'),
                validate: (input) => {
                    if (!input.trim()) {
                        return chalk.red('Please enter a question.');
                    }
                    return true;
                },
                transformer: (input) => {
                    return chalk.cyan(input);
                }
            }
        ]);

        if (query.toLowerCase().trim() === 'back') {
            console.log(chalk.cyan('Returning to main menu...\n'));
            break;
        }

        console.log(chalk.cyan('Vita is thinking...\n'));
        sendMessage(query);
        
        // Wait for response to complete before allowing next question
        await new Promise((resolve) => {
            const responseHandler = (chunk) => {
                if (chunk.isComplete || chunk.error) {
                    socket.off('stream_chunk', responseHandler);
                    resolve();
                }
            };
            socket.on('stream_chunk', responseHandler);
        });

        console.log(chalk.cyan('\n' + '─'.repeat(60) + '\n'));
    }
};

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log(chalk.cyan('\n\nDetected Ctrl+C, exiting gracefully...'));
    process.exit(0);
});

// Handle uncaught errors
process.on('uncaughtException', (error) => {
    console.error(chalk.red.bold('\nUnexpected error:'), chalk.red(error.message));
    process.exit(1);
});

startApp();

----- [client-server.js] -----

// Client Server
import express from 'express'
import { io as Client } from 'socket.io-client'

const app = express()

export const socket = Client('http://localhost:8080')

socket.on('connect', () => {
    console.log('🔗 Connected to LLM server') 
})

socket.on('disconnect', () => {
    console.log('🔌 Disconnected from LLM server')
})

socket.on('connect_error', (error) => {
    console.error('❌ Connection failed:', error.message)
})

// Send message to LLM
export const sendMessage = (message) => {
    socket.emit('message', message)
}

----- [codeFiles.txt] -----



----- [codeFiles.txt.br] -----

[�E)'�����bDrҚ5@��0X�
�$�Gg!�_�/1�ݹ	��y��#�%����C�@q�I��$G8椉ϖs�(�k�G���F����<��<��ۏ`�Y#����?������p '��r�mJ>x�����X����B��nJEE	��F1D�(��L�d�g^;��>��ƾ��[?���g����N�$��?�}����*��H�1�ּ�U���?�� ����p�226�d��V�g|�P�ɺ$S�~�U�}�jn���,��0\Ruݔk�@��U�ZEȆ#7��]�D>�HY�*�ȟ����9S��4���"I�p�P��<�1�e�y���2�Z������k�CTNI��,��Vp�o�liq�,}�	�I�:�6D��B����O�Y{E�+��.΄���|�j�̙4�Ƥk<1���M�����Vn�4d�Ѵ5w�����4�`R���<�&�OR���s�y_+T�{��y7����I�g�QU�������Yz�E�2y�VA��|
�-P;��U�hC���q�&ú�sg��O��b�4��W��c��u�����fpn�/�}W_J��\����N��,9��t	��gK���6|LIV,jJ���*�������.|G��k=B<�.�S��o�#�:��8��҄�����:M��kˊ>5l���"���A�F�htڹl<�&�-"#5͝Rs\�������Bd���&T��?�U�ת#ㄊ��(�s�C���	�=�Kb����{�g�(��*�.��7��O"� ��tfO�.�<R1\�)s��?�IG�yB:�^ݨ^��s_/ӈ��t�C�Q�~#���.��PB��Bh���E��3q���)�E�+�vC{�ܥ�6'7S�Jm�q*42Y\��l��o'QJ���/�ʞ�
�A�Y.�����Ocn)Z֏2?nꚀ{&.c�Ãex��=	�Pm��Cj��3߱�{�	��Ra�k
ؘ֠����r�rMѳ��yɿ��
n�xٯ)QU�X � ]�����hv�,�O,ۗ͝�|ͱ��:�k���n&��9F"��JOX^��<��+"t�M��K�P�1J��09��L)P�x.P�8�}[1�NK�!�BU�C~���[v|@
�L��M��q�!2.)a=d�8�i�v�M���Z��`",]�	L`;�*#Ӈ$��bB��E�d���M�|���%̴3v1l��6��;���ţ�[0��&�,6��࡚�:�ٝҝZ�2e �g&�����>C��t�gCf �H@���!]����u�O|�c�����>eb��h1,#e�oe6Zze�"�oQ2�NB���46�b)�������R� ��7A�"�x?�������2v9AP;�[��&B���E�Օ+:��}����,]�
�� p�JP)f��"�ic]����_�X�ō#�X+E��#mM}���`� ���:T��5-�IԠW<��v�dʨaw�V%2��Pt%��PP�[�-�㲏I�!H� �s��z9t�H[; �����7u;b�䤴��?Xr#�d0�8e�ю=J�!Z�G:Ӕ��G[�i����!u���Nٔ�f��^景��o4��k�¾N74�|�
�C��q�"����ce>�>vG����"��lL�g�A �8�2\��T3yN��kA)0Õ8W�F����w*�~N��mv�u�)�
1bf�ٳ)���z^�9-�N!�^�t��K���k����������zV�|FQ����9�G.�i�C�v +ƶ�C����hu�)�,q�ُ17X��� V]�X�4��})�2#�.2i�T��*��'�8bp2�A���ˎ}O7cf~ �:
Km�y< ���atI-.z*�K�'���8�9��n�X��i��TO��I��V�+�N��9G5�r|3ԆO<�R5�dDѠ�å�-)��1����V��R�7�v��Ţo9��*���(XJaG�ސ����at�5f��$�5����gX�Ī]����*c�]졅��<��|����(�?niNKqk�f���J���C-�:��U��\���RsZ
V`�)٤D�!Cxs�`r��sO����=oW{=x�su ���E6�lT��>�tѸ��[6�Lg��Z�E����}3�/�f�d2�K���u��ID�nY�	�d�P�����Z�YȬH�c���a=��{ƕS�7N��6*��E��T~�=7[����^	b,�-�m�xD�ms��0�-~}�B;�lX�!���խ:�#+�������	KLse�� l� �5�� %�}�!kf8���j��t�g�}p�=�+��=B�,�T�Q�O���}�u�M�͐�@�^.dYh����i��xѬci��.۶X��~pa�������`�7ScM�1͙,�����X�f}nz����P���w���\���z�,y�y���%�/Y��D@.gI���7�R9�B9/~�%)Z�< �͢�)�'G�2�#�$N���m�o]" �Q2Ez�
Qy�^XS�(8st �[BH7��aofH�8	9���]yz	2}�O��TJ2DHO����O�e�F3!DQLQuBʂb��E���<������	��fB�	1���ҫi.B��a;��#�|�m$��e.A�I��-����>�&��ȣ���Ԓ�tBd��u��{6O�O�<d���g��!�3D?Fi&�d��ɵ ��!�.Dv�kr�FNɿv�n�N�݇�g~�Bv*�!���
y�~G�iBHVH��x՞���^BV�r��G!#dmUM�˄�H���}�?|�_�kR��2NH����Y��$W�B�Hb�����b�h�H�¾�N������ND=@^\ �!��KFah��H�j�I%�!�h	q�'fWI�{�T�/�	��C�����fr�<I�q���u�-9RA�3�Z��1!C.BȲo���1���G��(H���&����v����)B�� �t��JymP�T��6|Vm&5��4��Ov���-�T��3|�A�DI��4wRK�C&�`M�u�o'Ĝ$QB�	�ّ�B^lB������*H!�5��]�Y>N*ȓ3BHi!��ɻ���B�*��I��B��6�M�ekf#����:	�ғi��'�rE!��X�fB�l������z�k��$�B���ɶ#�w��˲]��[w�P^�=�i�H"�y�%�ݟ#�/o��%h�����]�	!�WgJÄ��*'�$.BH)i#��uB���
!62K��<(���/G���B��%dW:�ĭ	��&���ɋ	%�����>m먓��vIF���*�^������RX~qFp����_�G��#�(5��m��������;O�"����P����]�Q��#�U�p��v�,W���*�w���$�?�66�|X#]��LHHE�-����Z���&�ų�mi�%�f<��ڟ�D����F����߇PD�D㲆�G�Br9.��-&yb&:y�!�qܙ��$�T���%^g�j7p������,!��.�1n\��#��.�bw�ȩzP8G� 2�C4& �h3�*Yۋ�.g*��?4�#�)�����*������j����>�$d�����}�\����"6;�DWuӟl�9��@.w�|6�Tp�x���ޢw�VDKH�Td
�.B^�%�4^I��yr"d>+��!�R�9F�D�2�(�49��l������O�$��cӬ}��#]}�t02���s��n��N��t���Z�8�"JО�/'wI�ݒ q�%O�@҇;4xP�N�3��ERk�-�`�$*f�����w]K?��+#�m�l��ұI��l/:�DB��n��a��|{�2�.g�E��3��mY��&"��B�̻�Ɯ�e۽=|��Hr%��Hē�Z���9�� ��ɬx�;6����x�'��?�Gr����Im�D�ו�µE�_qC�?L����,4�U����q'	�;5�e����Q@�Y"�����!W�-�O�y!�-�d��͐�O�n�r3�i��db%��� �i���Q2��+������d�IE�[�����sм$�*}s��Sw'�rO�F�Ǚ#r�0DH_�/���#c6�)�W�oW�5�ﾑwK��� I�6�t�4�C��1Փb���u����n����BVB�XD^B$��9!�6Dt�כ���
�&7H�od߶RD�Hw9���d���)��j59'�KH��D	���;�+#	٧}��t����}c��E~�l�/Do ����J�����b����܊'��@��N�g����� �C���O�B�&��������Gȼ�e/n'%�K�����g��yS�a�����C2d�eHY����]��C�~�B��&=Go t��{'�畵�򝶐9�3�a&nQm�A>�P�ʹ}`LkV�a2�W9$��Q9�%�B�ٓ"���tr�HX��+�s�L�$~Dl���Dy�"��|�}w�n#5�R�p?B��^4���|:��w%3����жV�:��u���U� y�$�W�Y����|�&��J�	�"d��y	i%
�&��I|D�9�z�`��E��>�8�^Hl���`#� i���"�4�E�X�r�I���L��{���f}�T틑"���I��>���鿞���א�e�ȅ�9���(Ʋ.�g������VJ(G�Oj
1�#%+3���(�0�ըb@(y9#�������.�Lzu.���E���Yv[%k
�I��g��?f�O��r�#�X�-> �:9Pɝ(�!`�ˌ���A�!U��IT���!�=7��*�a3��'��db �Ȱ�Z�����c�D�6�kGJ��"�,3�p<�EP�u0����ޢZY�lB#�lg��Sϻ�MC���0��m��=����&�ɦ��o!��i!��F�	��O-�N�
�^F�(�>DG�w��V!j��g�Qn:G�$����i����&�qI�PA,�.�Ç����?{��ZhH�/�d���Y��21q:���0(��ۭ�e������z���"*�մ�J�GL����{�E�>�'H+I�����lu�8O����yr�d�N��HI	�90�GȖ���e��qc�r�E�g.ِ��[[�GTylI6���(E��MxϬ�Mzjb�����0�弾M��+��}������D&��63�H�p�SD��K�Xj?��/^!d��sٟ�&s���~�V��|��0AG&
��m�~�DJQ�?��a�O�/�����%�;L�"�+���4dQy�C<Ç�`6�0)R%��o����~=)[u0 ��Ҡ}�	Q��	�<>i�������l��>|H
7f!��"���s߮�qC+k%�;B5��3����l!�*��Q6D�u�ѐF%Y;�I�W3�d���W܄���~�!�{�/D��d�$��1��0���e�f��x`�U���̢�J�� �oR�x��ӽ��^_�P��r�YV.Ћ#P��qr���)n:	G����>��1�5�W�-7�o��0P�l�Jo�ɲAG���ag�)�Ʒ<1!]x@�����ɺ<���&B�b�|������C}� �M���%]\�$0ȁu�ZR�0�����3-�4��V��O'��c��D޺��]DH���>ɇ�	`��U��tbS��CND���,�!�/���R�$d�:MH�|�Gv'&���iDH�䉄���D~�9�.5]W� ��C�E|t�~x������h����cq��A��%^dN��!�'�	��6�~�Sx0u����_�e�~�R��U��m�?[�]�W� FD�i#�4��19^ i���~]7D�4����w���H[ip�#w_4��L:��	e�����p�:3��<�j�����橄D�I�x��%�NlA�S��,:���9I�r���
!xŧ��x�S�$3$�'{d�(s����|,~E�� �L��1�֤�-�w�m&W=5��Z%kw�\�N;&�R��s�\,����Ȑi�II�>B����n�["����(Is���#��Dvk!�ir��ي-�Ud��Id���h�KM)%~�덓>�DO�i=%ct"$��'Zs�������t����$���Ɩ�$Jm���$�\^W=�rI�f��j<DCbܽR c��k;Bzk���-2N|"�%��^�{MD|&B+�����&��d́���$A6IK�QrA���M��/�^~:hj'��GV�	]O�!d�,6!]\=G�`t�~��d�[��\�&1|��+Ě:9�H��G����ܤ@J���x�N�Kצ}��h�d�亊�����[��T�N�uE$5�s^�(�#{�� !Ť}��t	�TE�����"M�3����u��ZK�@�E$�l�On���U=� Z�g�5o\�#;�������Y���g�r=����*g�>²�^�%�fl��aQ��2Y�N�l����	#�"cVǊ7�l�:�y�J�,�7?����l>1�y�C6�A��%�BC�ܚ�"�Lc���F2� ]����� i�	��BhC������V�O��l���V���^ٝO[,��{Ij~Hr��$KlV�~چ���,�0������=�v˲�8���d���X2�Y���)�k�����te>ܺʘ�r;kذ�H_��U��N�Mg��䇹�"F؏+#���ow�TS�h���|�(x��}da�׭�#�`�=[�H���jS����[�a�L.��4N^�	-s+��	R><є��`8��\BdG��sǢ)+�JB�뎈e�}��5�⤇�J�����ι�rN�{��^"$��J2�zC��쎆UDg"[/!��kB.ȏa9 d��.�Q��i����ƈ.A>�z�����MC�?���;jwE����ۣ~��=%=�J�&%T:F����a8pnм����.��=���(SΩ�����&���iwu4ы8��B���8�����J)�����.��f�����W�ݔ�"�&�u[H������'Cjw��"�/��%�B�@���h�%ʛ8�x[��w�`":z���<tZb����#���@�q�)���rBmw΋��/݈ބ09��
�=�lMzD�R-�\[5�d5F�!�˧x�p��:�#�$�Ɍ���$A4J�&D��WuB$�f$">t�I4DCd�HܟM�.���Q@������}���(SiC��;�V�t�Fb�'ݡn
�z]�d�������<Y�t%<�ǫaJ�:̜��v����d-:X��V�3��A�K�h�,�6��-v�X�«�יD6D�}ŵ��Gs�����[Vw��v*��LF�@�c��B����DJ�Y��_��g��ù��9�g��}��1���yC}�=�k�4��_����|�w������1(���n��Z�3�k�EU=�/#@��'���5JB��NL���h[u7n�Eڑ�JBֺ5�P�]!��)hu�͑��DB����=�\i��o�����K�T]1qוD0������JZę�#īv���I�H��z���ؼ�q�\V�=a72���fï�8��J�QH�7����nkB����T�w��|^j#��ٱk$����,{����j�D�P�Ռ�H��\EI� ~�*�Ss$C��ȡ�r�����`mQ�%�)��B� wnr���˕�G�T���{�\y*7��h��yEX��%��K��F�G�̙� !�/ۉ��P���W�J�^^_��^W�1�0u��e;oP�_���#�!k����F�$i�,y�U>"x��zY*}��9xJ�r��]%!����(9�';�KWս��@��/$�ˤ����'�[���[]{{�ˆ�tp��[ڥ�7����QⱠ=�<�|�vc�	�ƃ�P&��
Y���}0�"^v�]��/�6�z&��AȒ;��|�3!�&d��/��8r�,_Nrf�k�f�h5K����)�۞�4�'r�\o�3V��	����YڲFP_�}�����K�f3�浣y��	R�'��Σ�����Ϫ�#7d���l�t�v��ǚZ%�r�hLz8�)C���\�ͫW�P'+䮎�#�Xy�Ki�qF�L����u6"o %�wI��7�Nr��)�7w�4=�L&b��@'�ϑ�w�WM�b�6���qD����ss}c�}wOGt��H���>LvfM�3\%���;J����^���!��J�(!���]���I5yu��-;��'����+!1�ؕ\t�L��ƌt�����M�#$�v/U���y�]�VWa�ݨ�ѥB�	��S�W5J"�X�������Ƒ�7�K��	��D��SB*����O��E���J��]�|1��a{�!��k���|�����oT2cR��w6����r��i��{�$?Ά(#u�v��S/��k���z��XP�V/9�Uӫ��%��� �!�,!N!�ϻ������X�I���k.�����#�!v�	B�D��!��m`��]��"�rKH���ʐ�x��hFH�H�i�!��un�ʛy��~x��XW�\En0r�%�Ύ��FΑ��)'r�����ĽD㋶���]Ў����*��N�dX%�f�n���.�ig\����u��T���R�j��4`��>ɇ� ��W��$�&W>�#j;����N&��a�7��Q5R��A�D�MEJ���g$��N��z�ǿ�z�k�H��DC�C�W��=#;5�n�����Ow��;�ɉ��s���h����L.4�7=ae�iJ����8���~���O�����Vg^(ښ��e�a'�F�WT�K�n�^v���������H����	_a
y�e}��\ �"�w]B�H�I,�R QBf�]#$���f$B�c���ݎ���LE��.��8E�iKG�~��iUP)��,��|����-E
/���#9	�7/���1L$�s!��l���sj��j�����pR4�ZK�L�օ�%�v�[�:�&�,�2GZ��e���٭��%oݬ-���;-~�����SPj�9�t+Z>�H)���."�d���v�SX���n;{C��Z����W����b�l��i#�"Y���VN��^rAHM�h����/Ό�?�G
I[�,=�S�6�4oCG��Nd�.�v�H��?O���*���Ũ'� [oVN�=;Q�  V�{=�;�G��>Ig'g1�+ұ��Y簔��{-hq�[�Wׄl�I��Sȑ*�=��>�΋r��^�}���������������!�1O�d]?��I���>��n,,���sY^ӥH��C�EZ�_�aժ��{����kUH��*�0N��C�$^:d��c�!�s" ���ȦjM��&*B��~��(	Yq���LH�@䐼,�6a����X���Y��ْyY�k#�Tp�#�C=�&s��Ա��k�E��s�_����n`8��O='U�By�֛[8=Uۋ����L��nk^]�f����6{����-�		��^��T�I��a|��͗������,�R}`F��44>����y��D�F�7ț{��-��/h?�,�����A��r"����dB:�k������d�C:{�Q���a�oɴ�/������->�gj�gG���n��@�^F�A���x)�wQU���Ւ��b_���j�BXx��oS����IC�Ħ�^����v��)I�|�@�a�Z�3a�c���N����?Y���'L�J�Q[��N�����4和)K�$���X�$	rEtĠ&���v/��R^L��d������.Bn+̤1�"d�成vR);'����4�������d�T����?��|���N�7j-=)����I�COw8>�k�W��b���ay����L�3ȯq��A[e��p��A�2����|k���D�ڕ��/��,�p��@s��~<��"�����"��!��5�ƒ�l;R�ͲC���|,��9d��g���5bڨ��X'�$����';,���;���2"�׽ӛގr���L��>m�OZ��|��\���脽�$C_bzi�|�%�;'�qwS!2~7�I{%�8!D�&$OH)��&��Hݾ��p��j�=��oP�3؊d4D�Y�;�!�]�o�'Ͼj2a�IѠq%|L�m��I���W�j߁����m-!��6��V%�D3H|$�U���W ��dm�R�TX~��0!�f�
��[;u?M���_��m<�y��U�-lu䕄Z՚+4�爐Ӊ���������4<����O�$�e�]#v�܀�
nY�:<��!��r*�������7���7p�V�%�݀8�^����a�ec�� ��SOɪ?����֨���6���=�6#V���69r����
��Ɵ�r��$���W'5�����&2��#����@���N���S�e�Q5'/�T�I����Pp��ş>&��פc�?9�> �ri��x���m�W����]�¿Gw��XEF�_���R �m%I"�C/���NH����t��DkA\^�W2���Af���Vt 5�2M��3��E��I9Q����ϱW�n��jG��)g���N��Ir>�NĒ��+���
b�<`p�_��[���bA$�D��*V�%���U7(PvDE\�'s�f��/|�;l4Eg[��F��zS���8�Lk����@�e
X��1#�{�)b_-�(zꀻ=�uy��*��-��SUȂ����dU��8Z����]�����Le�pN�R��X{�6!:)�
�7|u�����c����%]��m�F1y6U3�=�Q��v�ԝX���b�U|��p�������W� �KI��ik+!�y��|�m�A6��0!��끰�a H�	��_��~��?k��*u!���C1|L�M%��a,y�H�z�l�CZU��mY��6(�%r���� �,p.�= �?�2m��&D�V84Z⅊��Q�,���)��	�-��jH��cϦ3�t>��8��_V/*��U��
11Z�/��9����&3bjp�q��Ȁ-����m�$?�$�(�
�4@�w��#M9B��4�*���K��x�oG���e�D;&����s�.��j�OkD�������7��b$�X�������w��ߖ_ɰ�#CNϋ�%�(QZ�[ښi���Ky�ڻӌ���u���u����D���G*Y'��nRVSX �s?�A�eq���ט�H���DbL ��ͭSR��n��N�Me���>�Rg���X5�h
�ŕ7���.���^P=��I�J�"yNw�O�/��G�p���:~��]�QR�{Gܹ���)B$���~��ybS>��TD���b����`�u�(�l(˶����rw)Vw��7��/c��O�i飂H/�㵢e���;��,�!�?vk���b/%���F�,���[�#�7�E�D;�p�U�ë���39��������e�D�\CDٸl?"�Q"$DG�H?�w�B�_��ت&���'B��l:�V�P�?���J��L�����|;ҳ�Q�y!n�$�{���d>L)�o�ER��Z����/{I�pb���}�DM�6�o�3�R�/i�p�.)^!֋�:hm�(�bޯ���Y�Jl������[���M>Mz�d��w��FI ��{�{<�d��2����u�p���wE�@��M-�gw�����7gb�S�y;𚂆��A����Y.L�Hk?�!A�*�|ˋ�]f��WIU��0��V��R�vlL�
WP)GBzl�_����?f���wO���_I�g	�~L�d��Yb+d{ȧ���{�{zp
93���fKnJ4Ȉ��!���d\J;�R�n�8��J�F_�ϊ8!.	~Kh�w�Hi4�/`���Xxb�<��Ha�[Mz��1q^�ֿ�_)&sF[Շ=w?؂��Q���j��ӂ'�+�~1��"��|!�=�J^���ih��ɜn��(9��)�ێ雧�j���d�um�7���k�{�)��k\|���}Db�Zd�~d���l�;CH�,92��Uvj��DO=��]�w�P����
-f�nol�Hd-�.������ė�T���V;	�W�����'i�a��"��Y�1`�/�����Z7v¾Ɖ���O^�6Lz�x�L
;~�`�W>�O>�xC�B��l��K�4����ln> =��Z�����
Rh#!o��h7UnB�@�-�����	!��D{L�1!d���7��:��'��_�:r��	r�%N���E2�-{rD��f��cUE� �l�N������v��>�3?�u�f�����^�@��*�z�%t3��m�ʛ�џ��:���E>k	q�MDS!;��zAehRmT�2GD^�g��ś�	T6MtVKu��Hq�}U�lL��.t"����p��ɓ�Q䔏hMR�ayފ�n/2�"��4T<��f�\���F��tB���1Y#���ʆ{�����=b���;"'�-� �&��^���y�\�l]�v��	���Dz ֜7~�<��L,�]���8�Eu��)�,�����l
k���Y���{+�Q:Č��)�]�8��x�K)�̒]"+dm�hu9sO�����Z�R�$����o� !*e�6Qň��\ �«ITrNj��5����IR7NP��C�A�W}pc��K�J[&I�g��L�N\DI�0E����I2�#���yN������ɧU�D��Y{JV4$�s�dv*&�ֻ��jR[[�f��]�K;�Ϭ+#��&I�ԙ��u�J��x�8(UfŽ��+�д���'��v��)�ι{x?Į��FzΦ,�棯�tD�D���������6�����d����w��
CҺ�[rr.$�J��W6*���q��R�CJY{Q��b��B~���q�*DTRy9�!*?9$d$@ZH��������~^s�6V�j��5�IUV�t�2}����ی�2�QLI��`�ղ��:���˟w��KIR�����f�^ Ƿ�����l�Hv�5��D�k7��!))�9�x����,գ_�\��ôv�ݩc�Y�o��B"���û~�K�#ɚs��kM�#��$�ʭ�Ql��P��!%+��<e���='f��8��i�d�/��f��������lB�V�$�BC��
�������%dk[>l��w�\_�S�������V��j�mR_5���̎^�}�}�����	R&6�k�ד�����/�t���{8�5��k����$�'{�%۵JG����v4�Q���P�ѣ���d͡ό��w�n�Wb�i�jC;u��Y��� �HʞAĊۗ'e����i�:z�=W�ȴ���V�q�$�m�+��k�n8�Z�+�
SVX�f}~��s!�~H-&�kB���uG�~�W�O�s�������{��� !�N"$����J�a� zJf��EI�d�!��r����4�U�K�Sv�h�/E�a����9�}u���aM<^9�0���e�޿��K�J��D��,UjmC�sQ-�󞶀�����EXO���a �!��^��̻~����u�U�N!B��� ��E#���r�����>EzLA�G�����@.�2sH���WW	!d�D|$;�KH���92�_y`Q��n�V�;WL�=�[֜��I��}XMȉ�dU{��H�؟���¥�P&�F����[D��t�������N����a#a���+"7�"�
��=hȩ'ڪo�ٳU+��uD�th���|g��|dٳ�(Ԗ�t&�����j+���I�wV��h���d;��l�k����F��ћ�vO�ΕV��,�d�q���Ǯި�yN�J�3�w�tߗ��Hz�����d�������J�[�N98ۮ"onD�L�`M<6�9#��a��9�.{l��%ґ#��d��`��İǝ6)����B�+���Ѧ��Q�#:GTR>�$�mC�eD�>��D�|Y�~�"&���D���*��r��"��l��l�	�RL����LU)"!�JrI*}��=�밇9�%�1lw/��j����%���i��Ů��]��K���)�A�cNɧ���>�Y��Cc�E��W�p-��Y�A�̿���-�
��m����d���M:��J>R��g7'V�,�-�/�£���!���ſ���<e(��SŔP�!E����ԡ6�xt#J�ݟ���k�L��i����r^�L|�+�����c��x��]�&2s�	@A���z^'�rx��3c�'���aA�������AE�\��|�,��ɑ�H���o]��6�²��Ճ���~8Ϣ�ֈ���"�}Y��ďծ�������9�}�a���" ��[Y�5��U�t��M�e����,4z�_�J��K�۸J��4Hr���IR����|�	%��O����~E�c���m=L�a/��w��VC�n"���n���;&����\gUvk��������L��[R$�v��tF��,x�_Y𪊴��k	Eg���#�**���#;�qO��cEi9ɑ'?�
��MJY�q��k{�3�4�N�6��*�9��%��B�n��m�5�!%[���s�������+��吹8���3c"���H��deC���G6H&qL�xBJj�Ix"i�n�|b�FČ�mL���Je�m�#jD���]\W<�b�@R:�޷g �k*)O8�TpKY�'1}$	#QU��"�a��&�ߧ��&�E2GN�������s�+��J�w/#�3�������H#9
�aB�ݍ�WH7�IZ�&Hg�Aɳ��LR\J4�v��JypVqe���k��xuq��>���i/i<���N�&e����ɏ5t�ŏ� gZ�����M?>���pGl��ң̜�;�g�pY8M�r�+���7����Ȏ:��Kܱ��E2<#�Y{=�$��������'~B�7���sE�<&�sB�����]��!N#i$:�9 L9	�i8i���p�[��= �Ɲ�׵�]k����3�FDIH�]�TKf�{�<��ޟ��6&C���jJI	!;d��!"�ؔ_�H�%!'�Z��I�1����"d��T��%{��j�D�?�ޒcB�`�r��/�_�J���J�nZ��%��5��v3(#�N�[��e]y���TEJ������4��d<�����$!KS�}f����''��t�/J���F!�iB��u9N9{Rj�� �G�P��ft�S�<�E��y��4d�	���5��)�x������ϗl{6J�Ų��V�U#xKʐ�-9i,#n"̑��@A��$k�@ȩ�Ƞ���J���B���{d���"H��nBL�|V���b�@ƛ�/'��x��;,m;�N�`���iN�~>"��d���#8��z�ܿ��S{5��;�: ��|�J�rN��DR�[T9���;5B6�;�y/��<��=m(0�f�<����x����羈n���)�y4[�f�q���ȷ����A���h�'��F��뀱�|����qqI>��@���繒��%�"�7���s���Q����3'f��zb8��/|"�ڻKy�}��qO/^�%����{����ԕȄk�Έ�$_@d�{��X�6�W��=����Ɋ�ۈ�ͳs7�����.���z��m��p�p���<y��$y��VN����+H��-W�w�q��C��%[b�C�Y�Ǯ�<
�W���)-Ly�!W��-��5�v+�����ڭ�v�0���O^+��)#����!�ۖ�D�2h��) s8�+ے+���z��p�k���.���~U��@�hl�:�8d�=�%�{;��0�j�A*�a��Aj���ڞ�]�H\U��0<t�OP�Q3K�n>S	a��N|_M�6�d����h�2rʽ�O���u�]2�y��B�Y��4�T6:�C���ѿAZu�js�4�4i��d@k � dnX|kC�l��kLqjKK,�nX�;��)`�y��lsO{��e]n�È ����A�,	��I�~�-Q����<̢�L^BK�Q�QH��O[��y4�;@�=��\ĚwD\J��f� z��)��F��%	�r�Aj(:?X9:
�5�i�V�p���D�X������:M9C-���9��&��@RKmS^�ѡ�e���\�g�\B�*����xyת�KCb�'�/E�wm�IB��g���y�u^�*�ǡ���y�i�;Q}�
'�r�a�ȢqfM,�)�����f[�!4r&���~�7����n{q�-p1{�_1�:��\�GB��3"D|�i�a�6�tG�=B�Mq谧*��}K����j���bD'M�ЕƓ˗w뻈~u�lN@�΀3G�5�z���,kXr�=s��V�����a��m:D�;pZZUɓK�V/��ݣ��۞7�J�C�fGl�H�]�������G���W�X4Uf����d{���:������K��WNف�X,�s�7�V����L58O�ʜ�՚@�ڃ��S��F۴1#��M1>�פ-e7��6���uvO�y�����3���6���j��G3��)4�� u֝e\��l��Q�]<�劳;e��m{A�����`]��53���Z�i\��J�:
�������93tt>Z2T�b�s�1-/+6���	SFm��FF͈�?���<���"I���W�Ηɬ�s�OW�⋼��=�C�[y��q�)u<(v-�b��.��!]��.3|bC�d�d�sX��^���E�*�����E+tzF�'�TW��P;E�/D+��/�(���;\~���i�ޚ��������!L��⇼���|xZ��4�$���4�l�g��}~���b�֣a��j.��<��3�7�Bw�"g? `��y�9$,�S���s�E#�­f��AN���P5��A�|4�����6���������G�����f��Ӽ���_)�R�����.׀)L���尾��R��L�%�@�Q}��Y�x ?�Md�����7�uE���w����WMm�b��{L�� ���O��E��4�K����cی(�

----- [compression.js] -----

import { createGzip } from 'zlib';

readAllFiles(__dirname).then(async () => {
    writeStream.end(); // Finish writing

    await pipeline(
        createReadStream(path.join(__dirname, 'allfiles.txt')),
        createGzip(),
        createWriteStream(path.join(__dirname, 'allfiles.txt.gz'))
    );
});


----- [non-streams.js] -----

import { fileURLToPath } from 'url'
import path from 'path'
import  fs  from 'fs/promises'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)


const folderContent = await fs.readdir(__dirname, { withFileTypes: true })


let content = ''
const readAllFiles = async (dirName) => {
    const folderContent = await fs.readdir(dirName, {withFileTypes: true})
    const dontParse = ['node_modules', '.git', '.next', 'public', '.vercel', '.gitignore', 'package-lock.json', '.env']

    let directories = []
    for (const file of folderContent){
        if (file.isFile() && !dontParse.includes(file.name)){
            const filePath = path.join(dirName, file.name)
            const data = await fs.readFile(filePath, 'utf-8')

            content += `\n----- [${file.name}] -----\n${data}\n\n\n`
        }   
        if(file.isDirectory() && !dontParse.includes(file.name)){
            const filePath = path.join(dirName, file.name)
            directories.push(filePath)
        }
    }

    for(const directory of directories){
        await readAllFiles(directory)
    }


}

const writingFiles = async (content) => {
    await fs.writeFile(path.join(__dirname, 'all-text.txt'), content, 'utf-8')
}

await readAllFiles(__dirname)
await writingFiles(content)

----- [package.json] -----

{
  "name": "llm-api",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "axios": "^1.11.0",
    "brotli": "^1.3.3",
    "chalk": "^5.4.1",
    "chalk-animation": "^2.0.3",
    "express": "^5.1.0",
    "figlet": "^1.8.2",
    "form-data": "^4.0.4",
    "gradient-string": "^3.0.0",
    "inquirer": "^12.8.2",
    "multer": "^2.0.2",
    "ollama": "^0.5.16",
    "ora": "^8.2.0",
    "readline": "^1.3.0",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1"
  }
}


----- [readAndCompress.js] -----

import { fileURLToPath } from 'url'
import path from 'path'
import { createWriteStream, createReadStream } from 'fs'
import fs from 'fs/promises'
import { pipeline } from 'stream/promises'
import { createBrotliCompress } from 'zlib'
import sendToServer from './send-to-server.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const writeStream = createWriteStream(path.join(__dirname, 'codeFiles.txt'), { 
    flags: 'w', 
    encoding: 'utf-8' 
})

// Removing the limit of event listeners
writeStream.setMaxListeners(0)

const readAllFiles = async (dir) => {
    const folderContent = await fs.readdir(dir, {withFileTypes: true})
    const dontParse = ['node_modules', '.git', '.next', 'public', '.vercel', '.gitignore', 'package-lock.json', '.env', 'allfiles.txt', 'allfiles.txt.br', 'llm-backend']

    const folders = []
    for(const file of folderContent){
        if(dontParse.includes(file.name)) continue

        if(file.isFile()){
            const filePath = path.join(dir, file.name)

            // Data will be read here
            const readStream = createReadStream(filePath, { encoding: 'utf-8' })

            // Appending File name
            writeStream.write(`\n\n----- [${file.name}] -----\n\n`)

            // Appending data of file
            await pipeline(readStream, writeStream, {end: false})
        }

        if(file.isDirectory()){
            folders.push(file.name)
        }
    }

    // Targeting sub folder now
    for(const folder of folders){
        const folderPath = path.join(dir, folder)
        await readAllFiles(folderPath)
    }
}

readAllFiles(__dirname).then(async () => {
    writeStream.end()

    await pipeline(
        createReadStream(path.join(__dirname, 'codeFiles.txt')),
        createBrotliCompress(),
        createWriteStream(path.join(__dirname, 'codeFiles.txt.br')),
    );

    await sendToServer('codeFiles.txt.br')
})

export default readAllFiles

----- [send-to-server.js] -----

import path from 'path'
import { createReadStream } from 'fs'
import { fileURLToPath } from 'url'
import FormData from 'form-data'
import axios from 'axios'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const sendToServer = async (fileName) => {
    try {
        const formData = new FormData()
        formData.append('codeFile', createReadStream(path.join(__dirname, fileName)))

        console.log(`Uploading ${fileName} to server...`)
        
        const response = await axios.post('http://localhost:8080/api/file', formData, {
            headers: formData.getHeaders(),
            maxContentLength: Infinity,
            maxBodyLength: Infinity
        })

        console.log('Upload successful:', response.data)
        
    } catch (error) {
        console.error('Upload failed:', error.message)
        if (error.response) {
            console.error('Server response:', error.response.data)
        }
    }
}

export default sendToServer