

----- [back.js] -----

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Phone 3D Visualizer</title>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; }
        body { 
            overflow: hidden; 
            background-color: #161621;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: white;
        }
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.7);
            padding: 15px;
            border-radius: 10px;
            z-index: 100;
            max-width: 300px;
        }
        h1 {
            font-size: 20px;
            margin-bottom: 15px;
            color: #fff;
        }
        .status-line {
            margin-bottom: 8px;
            font-size: 14px;
        }
        .connected {
            color: #4cd964;
            font-weight: bold;
        }
        .waiting {
            color: #ffcc00;
            font-weight: bold;
        }
        .disconnected {
            color: #ff3b30;
            font-weight: bold;
        }
        .data-values {
            font-family: monospace;
            margin-top: 15px;
            background: rgba(255,255,255,0.1);
            padding: 10px;
            border-radius: 5px;
            font-size: 13px;
        }
        .controls {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .control-button {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .control-button:hover {
            background: rgba(255,255,255,0.3);
        }
        #resetBtn {
            background: rgba(255,59,48,0.6);
        }
        #resetBtn:hover {
            background: rgba(255,59,48,0.8);
        }
        #screenViewBtn {
            background: rgba(0,122,255,0.6);
        }
        #screenViewBtn:hover {
            background: rgba(0,122,255,0.8);
        }
        .mode-switch {
            margin-top: 15px;
        }
        #viewOptions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <div id="info">
        <h1>Phone Motion Visualizer</h1>
        <div class="status-line">
            Connection: <span id="connectionStatus" class="disconnected">Disconnected</span>
        </div>
        <div class="status-line">
            Phone Status: <span id="phoneStatus" class="waiting">Waiting for phone</span>
        </div>
        <div class="data-values" id="orientationValues">
            No data received
        </div>
        <div class="controls">
            <button id="resetBtn" class="control-button">Reset Position</button>
            <button id="screenViewBtn" class="control-button">Face Screen</button>
            <div class="mode-switch">
                <div>Orientation Mode:</div>
                <div id="viewOptions">
                    <button id="portraitBtn" class="control-button">Portrait</button>
                    <button id="landscapeBtn" class="control-button">Landscape</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // DOM Elements
        const connectionStatus = document.getElementById('connectionStatus');
        const phoneStatus = document.getElementById('phoneStatus');
        const orientationValues = document.getElementById('orientationValues');
        const resetBtn = document.getElementById('resetBtn');
        const screenViewBtn = document.getElementById('screenViewBtn');
        const portraitBtn = document.getElementById('portraitBtn');
        const landscapeBtn = document.getElementById('landscapeBtn');
        
        // Mode tracking
        let isPortraitMode = true;
        
        // THREE.js setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x161621);
        document.body.appendChild(renderer.domElement);
        
        // Create orbit controls for manual camera adjustment
        class OrbitControls {
            constructor(camera, domElement) {
                this.camera = camera;
                this.domElement = domElement;
                this.enabled = true;
                
                // Camera position in spherical coordinates
                this.spherical = new THREE.Spherical(5, Math.PI/3, Math.PI/4);
                
                // Initial target to orbit around
                this.target = new THREE.Vector3(0, 0, 0);
                
                // Events
                this.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));
                this.domElement.addEventListener('wheel', this.onMouseWheel.bind(this));
                document.addEventListener('mouseup', this.onMouseUp.bind(this));
                document.addEventListener('mousemove', this.onMouseMove.bind(this));
                
                this.update();
            }
            
            // Mouse controls
            onMouseDown(event) {
                if (!this.enabled) return;
                this.isMouseDown = true;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
            }
            
            onMouseUp() {
                this.isMouseDown = false;
            }
            
            onMouseMove(event) {
                if (!this.isMouseDown || !this.enabled) return;
                
                // Calculate mouse movement
                const deltaX = event.clientX - this.mouseX;
                const deltaY = event.clientY - this.mouseY;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
                
                // Update spherical coordinates
                this.spherical.theta -= deltaX * 0.01;
                this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi + deltaY * 0.01));
                
                this.update();
            }
            
            onMouseWheel(event) {
                if (!this.enabled) return;
                
                // Update radius based on scroll
                this.spherical.radius = Math.max(2, Math.min(10, this.spherical.radius + event.deltaY * 0.01));
                
                this.update();
            }
            
            update() {
                // Convert spherical to cartesian coordinates
                const sinPhiRadius = Math.sin(this.spherical.phi) * this.spherical.radius;
                
                this.camera.position.x = sinPhiRadius * Math.sin(this.spherical.theta) + this.target.x;
                this.camera.position.y = Math.cos(this.spherical.phi) * this.spherical.radius + this.target.y;
                this.camera.position.z = sinPhiRadius * Math.cos(this.spherical.theta) + this.target.z;
                
                this.camera.lookAt(this.target);
            }
        }
        
        const controls = new OrbitControls(camera, renderer.domElement);
        // Set initial position to face the phone's screen
        controls.spherical.theta = Math.PI/4;  // 45 degrees around
        controls.spherical.phi = Math.PI/2.5;  // Look slightly from above
        controls.spherical.radius = 6;         // Distance from the phone
        controls.update();
        
        // Add a grid for reference
        const gridHelper = new THREE.GridHelper(20, 20, 0x555555, 0x333333);
        scene.add(gridHelper);
        
        // Create a group for the phone
        const phoneGroup = new THREE.Group();
        
        // Create phone in portrait mode (default)
        function createPhoneModel(isPortrait = true) {
            // Clear existing phone
            while(phoneGroup.children.length > 0) {
                phoneGroup.remove(phoneGroup.children[0]);
            }
            
            // Phone body dimensions
            const dimensions = isPortrait ? 
                { width: 2.4, height: 5, depth: 0.4 } : // Portrait
                { width: 5, height: 2.4, depth: 0.4 };  // Landscape
            
            // Phone body
            const phoneGeometry = new THREE.BoxGeometry(
                dimensions.width, 
                dimensions.depth, 
                dimensions.height
            );
            
            const phoneMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x333333, 
                shininess: 30
            });
            
            const phone = new THREE.Mesh(phoneGeometry, phoneMaterial);
            phoneGroup.add(phone);
            
            // Phone screen - make it slightly raised and blue-tinted to be more visible
            const screenGeometry = new THREE.BoxGeometry(
                dimensions.width * 0.94, 
                0.05, 
                dimensions.height * 0.94
            );
            
            const screenMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x121240, // Slightly blue tint
                shininess: 100,
                emissive: 0x222244, // Blue emissive glow
                emissiveIntensity: 0.4
            });
            
            const screen = new THREE.Mesh(screenGeometry, screenMaterial);
            screen.position.y = dimensions.depth/2 + 0.025;
            phoneGroup.add(screen);
            
            // Camera (circle)
            const cameraGeometry = new THREE.CircleGeometry(0.15, 32);
            const cameraMaterial = new THREE.MeshPhongMaterial({ color: 0x111111 });
            const phoneCam = new THREE.Mesh(cameraGeometry, cameraMaterial);
            phoneCam.position.y = dimensions.depth/2 + 0.026;
            
            if (isPortrait) {
                phoneCam.position.z = -dimensions.height/2 + 0.8;
            } else {
                phoneCam.position.x = -dimensions.width/2 + 0.8;
            }
            
            // Rotate to face up
            phoneCam.rotation.x = -Math.PI/2;
            phoneGroup.add(phoneCam);
            
            // Add colored axes for reference
            const axesHelper = new THREE.AxesHelper(3);
            phoneGroup.add(axesHelper);
            
            return phoneGroup;
        }
        
        // Create initial phone model
        createPhoneModel(isPortraitMode);
        scene.add(phoneGroup);
        
        // Set up lights
        const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
        scene.add(ambientLight);
        
        const keyLight = new THREE.DirectionalLight(0xffffff, 0.7);
        keyLight.position.set(1, 1, 2);
        scene.add(keyLight);
        
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
        fillLight.position.set(-1, 0.5, -1);
        scene.add(fillLight);
        
        // WebSocket connection
        let socket;
        let phoneConnected = false;
        let lastPhoneUpdateTime = 0;
        
        // Target orientation values
        const targetQuaternion = new THREE.Quaternion();
        const deviceOrientation = { alpha: 0, beta: 0, gamma: 0 };
        
        // Mode buttons
        portraitBtn.addEventListener('click', () => {
            isPortraitMode = true;
            createPhoneModel(true);
            portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            landscapeBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        landscapeBtn.addEventListener('click', () => {
            isPortraitMode = false;
            createPhoneModel(false);
            landscapeBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            portraitBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        // Screen View button
        screenViewBtn.addEventListener('click', () => {
    // Position camera directly in front of the screen
        controls.spherical.theta = 0;      // Directly in front
        controls.spherical.phi = Math.PI/2; // Level with the center
        controls.spherical.radius = 4.5;    // Close enough to see the screen
        controls.update();
    });
        
        // Set initial button state
        portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
        
        // Initialize WebSocket
        function initWebSocket() {
            socket = new WebSocket('wss://' + window.location.hostname + ':3000');
            
            socket.addEventListener('open', () => {
                connectionStatus.textContent = "Connected";
                connectionStatus.className = "connected";
                
                socket.send(JSON.stringify({
                    type: 'register',
                    client: 'viewer'
                }));
            });
            
            socket.addEventListener('message', (event) => {
                try {
                    const data = JSON.parse(event.data);
                    
                    if (data.type === 'orientation') {
                        handlePhoneOrientation(data);
                    } else if (data.type === 'phone_status') {
                        if (data.connected) {
                            phoneStatus.textContent = "Phone Connected";
                            phoneStatus.className = "connected";
                            phoneConnected = true;
                        } else {
                            phoneStatus.textContent = "Phone Disconnected";
                            phoneStatus.className = "disconnected";
                            phoneConnected = false;
                        }
                    }
                } catch (error) {
                    console.error('Error parsing message:', error);
                }
            });
            
            socket.addEventListener('close', () => {
                connectionStatus.textContent = "Disconnected";
                connectionStatus.className = "disconnected";
                setTimeout(initWebSocket, 3000);
            });
            
            socket.addEventListener('error', (error) => {
                console.error('WebSocket error:', error);
                connectionStatus.textContent = "Connection error";
                connectionStatus.className = "disconnected";
            });
        }
        
        // Map device orientation to 3D representation
        function handlePhoneOrientation(data) {
            // Update values
            lastPhoneUpdateTime = Date.now();
            deviceOrientation.alpha = data.alpha;
            deviceOrientation.beta = data.beta;
            deviceOrientation.gamma = data.gamma;
            
            // Update UI
            orientationValues.innerHTML = `
                Alpha (Z): ${Math.round(data.alpha)}° (yaw)<br>
                Beta (X): ${Math.round(data.beta)}° (pitch)<br>
                Gamma (Y): ${Math.round(data.gamma)}° (roll)
            `;
            
            // Convert to radians
            const alpha = THREE.MathUtils.degToRad(data.alpha);
            const beta = THREE.MathUtils.degToRad(data.beta);
            const gamma = THREE.MathUtils.degToRad(data.gamma);
            
            // Create rotation matrix from device orientation angles
            if (isPortraitMode) {
                // For portrait mode with screen facing camera
                const euler = new THREE.Euler();
                
                // Device orientation in YXZ order
                euler.set(beta, alpha, -gamma, 'YXZ');
                targetQuaternion.setFromEuler(euler);
                
                // Apply fixed rotations to make the screen face the camera
                // This rotates the phone 90 degrees around X, then 90 degrees around Z
                const fixedRotation = new THREE.Quaternion();
                fixedRotation.setFromEuler(new THREE.Euler(Math.PI/2, 0, Math.PI/2, 'XYZ'));
                targetQuaternion.multiply(fixedRotation);
            } else {
                // For landscape mode with screen facing camera
                const euler = new THREE.Euler();
                
                // Device orientation in YXZ order
                euler.set(beta, alpha, -gamma, 'YXZ');
                targetQuaternion.setFromEuler(euler);
                
                // Apply fixed rotations for landscape mode to make screen face the camera
                // This rotates the phone 90 degrees around X, then 180 degrees around Z
                const fixedRotation = new THREE.Quaternion();
                fixedRotation.setFromEuler(new THREE.Euler(Math.PI/2, 0, Math.PI, 'XYZ'));
                targetQuaternion.multiply(fixedRotation);
            }
        }
        
        // Reset phone orientation
        resetBtn.addEventListener('click', () => {
            // Reset orientation
            phoneGroup.quaternion.identity();
            
            // Reset device orientation
            deviceOrientation.alpha = 0;
            deviceOrientation.beta = 0;
            deviceOrientation.gamma = 0;
            
            // Reset target quaternion
            targetQuaternion.identity();
        });
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            // Check if phone is still sending data
            if (phoneConnected && Date.now() - lastPhoneUpdateTime > 5000) {
                phoneStatus.textContent = "Phone inactive";
                phoneStatus.className = "waiting";
                phoneConnected = false;
            }
            
            // Apply smooth rotation with quaternion slerp
            phoneGroup.quaternion.slerp(targetQuaternion, 0.1);
            
            // Render scene
            renderer.render(scene, camera);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Start the application
        initWebSocket();
        animate();
    </script>
</body>
</html>

----- [back2.js] -----

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Phone 3D Visualizer</title>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; }
        body { 
            overflow: hidden; 
            background-color: #161621;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: white;
        }
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.7);
            padding: 15px;
            border-radius: 10px;
            z-index: 100;
            max-width: 300px;
        }
        h1 {
            font-size: 20px;
            margin-bottom: 15px;
            color: #fff;
        }
        .status-line {
            margin-bottom: 8px;
            font-size: 14px;
        }
        .connected {
            color: #4cd964;
            font-weight: bold;
        }
        .waiting {
            color: #ffcc00;
            font-weight: bold;
        }
        .disconnected {
            color: #ff3b30;
            font-weight: bold;
        }
        .data-values {
            font-family: monospace;
            margin-top: 15px;
            background: rgba(255,255,255,0.1);
            padding: 10px;
            border-radius: 5px;
            font-size: 13px;
        }
        .controls {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .control-button {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .control-button:hover {
            background: rgba(255,255,255,0.3);
        }
        #resetBtn {
            background: rgba(255,59,48,0.6);
        }
        #resetBtn:hover {
            background: rgba(255,59,48,0.8);
        }
        #screenViewBtn {
            background: rgba(0,122,255,0.6);
        }
        #screenViewBtn:hover {
            background: rgba(0,122,255,0.8);
        }
        .mode-switch {
            margin-top: 15px;
        }
        #viewOptions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <div id="info">
        <h1>Phone Motion Visualizer</h1>
        <div class="status-line">
            Connection: <span id="connectionStatus" class="disconnected">Disconnected</span>
        </div>
        <div class="status-line">
            Phone Status: <span id="phoneStatus" class="waiting">Waiting for phone</span>
        </div>
        <div class="data-values" id="orientationValues">
            No data received
        </div>
        <div class="controls">
            <button id="resetBtn" class="control-button">Reset Position</button>
            <button id="screenViewBtn" class="control-button">Face Screen</button>
            <div class="mode-switch">
                <div>Orientation Mode:</div>
                <div id="viewOptions">
                    <button id="portraitBtn" class="control-button">Portrait</button>
                    <button id="landscapeBtn" class="control-button">Landscape</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // DOM Elements
        const connectionStatus = document.getElementById('connectionStatus');
        const phoneStatus = document.getElementById('phoneStatus');
        const orientationValues = document.getElementById('orientationValues');
        const resetBtn = document.getElementById('resetBtn');
        const screenViewBtn = document.getElementById('screenViewBtn');
        const portraitBtn = document.getElementById('portraitBtn');
        const landscapeBtn = document.getElementById('landscapeBtn');
        
        // Mode tracking
        let isPortraitMode = true;
        
        // THREE.js setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x161621);
        document.body.appendChild(renderer.domElement);
        
        // Create orbit controls for manual camera adjustment
        class OrbitControls {
            constructor(camera, domElement) {
                this.camera = camera;
                this.domElement = domElement;
                this.enabled = true;
                
                // Camera position in spherical coordinates
                this.spherical = new THREE.Spherical(5, Math.PI/3, Math.PI/4);
                
                // Initial target to orbit around
                this.target = new THREE.Vector3(0, 0, 0);
                
                // Events
                this.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));
                this.domElement.addEventListener('wheel', this.onMouseWheel.bind(this));
                document.addEventListener('mouseup', this.onMouseUp.bind(this));
                document.addEventListener('mousemove', this.onMouseMove.bind(this));
                
                this.update();
            }
            
            // Mouse controls
            onMouseDown(event) {
                if (!this.enabled) return;
                this.isMouseDown = true;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
            }
            
            onMouseUp() {
                this.isMouseDown = false;
            }
            
            onMouseMove(event) {
                if (!this.isMouseDown || !this.enabled) return;
                
                // Calculate mouse movement
                const deltaX = event.clientX - this.mouseX;
                const deltaY = event.clientY - this.mouseY;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
                
                // Update spherical coordinates
                this.spherical.theta -= deltaX * 0.01;
                this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi + deltaY * 0.01));
                
                this.update();
            }
            
            onMouseWheel(event) {
                if (!this.enabled) return;
                
                // Update radius based on scroll
                this.spherical.radius = Math.max(2, Math.min(10, this.spherical.radius + event.deltaY * 0.01));
                
                this.update();
            }
            
            update() {
                // Convert spherical to cartesian coordinates
                const sinPhiRadius = Math.sin(this.spherical.phi) * this.spherical.radius;
                
                this.camera.position.x = sinPhiRadius * Math.sin(this.spherical.theta) + this.target.x;
                this.camera.position.y = Math.cos(this.spherical.phi) * this.spherical.radius + this.target.y;
                this.camera.position.z = sinPhiRadius * Math.cos(this.spherical.theta) + this.target.z;
                
                this.camera.lookAt(this.target);
            }
        }
        
        const controls = new OrbitControls(camera, renderer.domElement);
        // Set initial position to face the phone's screen
        controls.spherical.theta = Math.PI/4;  // 45 degrees around
        controls.spherical.phi = Math.PI/2.5;  // Look slightly from above
        controls.spherical.radius = 6;         // Distance from the phone
        controls.update();
        
        // Add a grid for reference
        const gridHelper = new THREE.GridHelper(20, 20, 0x555555, 0x333333);
        scene.add(gridHelper);
        
        // Create a group for the phone
        const phoneGroup = new THREE.Group();
        
        // Create phone in portrait mode (default)
        function createPhoneModel(isPortrait = true) {
            // Clear existing phone
            while(phoneGroup.children.length > 0) {
                phoneGroup.remove(phoneGroup.children[0]);
            }
            
            // Phone body dimensions
            const dimensions = isPortrait ? 
                { width: 2.4, height: 5, depth: 0.4 } : // Portrait
                { width: 5, height: 2.4, depth: 0.4 };  // Landscape
            
            // Phone body
            const phoneGeometry = new THREE.BoxGeometry(
                dimensions.width, 
                dimensions.depth, 
                dimensions.height
            );
            
            const phoneMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x333333, 
                shininess: 30
            });
            
            const phone = new THREE.Mesh(phoneGeometry, phoneMaterial);
            phoneGroup.add(phone);
            
            // Phone screen - make it slightly raised and blue-tinted to be more visible
            const screenGeometry = new THREE.BoxGeometry(
                dimensions.width * 0.94, 
                0.05, 
                dimensions.height * 0.94
            );
            
            const screenMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x121240, // Slightly blue tint
                shininess: 100,
                emissive: 0x222244, // Blue emissive glow
                emissiveIntensity: 0.4
            });
            
            const screen = new THREE.Mesh(screenGeometry, screenMaterial);
            screen.position.y = dimensions.depth/2 + 0.025;
            phoneGroup.add(screen);
            
            // Camera (circle)
            const cameraGeometry = new THREE.CircleGeometry(0.15, 32);
            const cameraMaterial = new THREE.MeshPhongMaterial({ color: 0x111111 });
            const phoneCam = new THREE.Mesh(cameraGeometry, cameraMaterial);
            phoneCam.position.y = dimensions.depth/2 + 0.026;
            
            if (isPortrait) {
                phoneCam.position.z = -dimensions.height/2 + 0.8;
            } else {
                phoneCam.position.x = -dimensions.width/2 + 0.8;
            }
            
            // Rotate to face up
            phoneCam.rotation.x = -Math.PI/2;
            phoneGroup.add(phoneCam);
            
            // Add colored axes for reference
            const axesHelper = new THREE.AxesHelper(3);
            phoneGroup.add(axesHelper);
            
            return phoneGroup;
        }
        
        // Create initial phone model
        createPhoneModel(isPortraitMode);
        scene.add(phoneGroup);
        
        // Set up lights
        const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
        scene.add(ambientLight);
        
        const keyLight = new THREE.DirectionalLight(0xffffff, 0.7);
        keyLight.position.set(1, 1, 2);
        scene.add(keyLight);
        
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
        fillLight.position.set(-1, 0.5, -1);
        scene.add(fillLight);
        
        // WebSocket connection
        let socket;
        let phoneConnected = false;
        let lastPhoneUpdateTime = 0;
        
        // Target orientation values
        const targetQuaternion = new THREE.Quaternion();
        const deviceOrientation = { alpha: 0, beta: 0, gamma: 0 };
        
        // Mode buttons
        portraitBtn.addEventListener('click', () => {
            isPortraitMode = true;
            createPhoneModel(true);
            portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            landscapeBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        landscapeBtn.addEventListener('click', () => {
            isPortraitMode = false;
            createPhoneModel(false);
            landscapeBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            portraitBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        // Screen View button
        screenViewBtn.addEventListener('click', () => {
    // Position camera directly in front of the screen
        controls.spherical.theta = 0;      // Directly in front
        controls.spherical.phi = Math.PI/2; // Level with the center
        controls.spherical.radius = 4.5;    // Close enough to see the screen
        controls.update();
    });
        
        // Set initial button state
        portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
        
        // Initialize WebSocket
        function initWebSocket() {
            socket = new WebSocket('wss://' + window.location.hostname + ':3000');
            
            socket.addEventListener('open', () => {
                connectionStatus.textContent = "Connected";
                connectionStatus.className = "connected";
                
                socket.send(JSON.stringify({
                    type: 'register',
                    client: 'viewer'
                }));
            });
            
            socket.addEventListener('message', (event) => {
                try {
                    const data = JSON.parse(event.data);
                    
                    if (data.type === 'orientation') {
                        handlePhoneOrientation(data);
                    } else if (data.type === 'phone_status') {
                        if (data.connected) {
                            phoneStatus.textContent = "Phone Connected";
                            phoneStatus.className = "connected";
                            phoneConnected = true;
                        } else {
                            phoneStatus.textContent = "Phone Disconnected";
                            phoneStatus.className = "disconnected";
                            phoneConnected = false;
                        }
                    }
                } catch (error) {
                    console.error('Error parsing message:', error);
                }
            });
            
            socket.addEventListener('close', () => {
                connectionStatus.textContent = "Disconnected";
                connectionStatus.className = "disconnected";
                setTimeout(initWebSocket, 3000);
            });
            
            socket.addEventListener('error', (error) => {
                console.error('WebSocket error:', error);
                connectionStatus.textContent = "Connection error";
                connectionStatus.className = "disconnected";
            });
        }
        
        // Map device orientation to 3D representation
        // Replace the handlePhoneOrientation function with this corrected version
// This maintains smoothness while fixing axis mapping

// Replace the handlePhoneOrientation function with this simplified version
// Using a more direct radian-based approach

// First, add these variables for smoother rotation
// Replace the handlePhoneOrientation function and add these variables

// Smoothing values for each axis (lower = smoother but less responsive)
const alphaSmoothness = 0.2;  // Z-axis rotation
const betaSmoothness = 0.2;   // X-axis rotation
const gammaSmoothness = 0.05; // Y-axis rotation (significantly reduced for gamma)

// Last orientation values
let lastOrientation = {
    alpha: 0,
    beta: 0,
    gamma: 0
};

// Flags for initialization
let isFirstReading = true;

// Extra filtering for gamma
const gammaFilter = {
    values: [],          // Array to store recent gamma values
    maxSize: 5,          // Number of recent values to track
    jumpThreshold: 0.5   // Threshold in radians to detect jumps
};

function handlePhoneOrientation(data) {
    // Update timestamp
    lastPhoneUpdateTime = Date.now();
    
    // Update UI
    orientationValues.innerHTML = `
        Alpha (Z): ${Math.round(data.alpha)}° (yaw)<br>
        Beta (X): ${Math.round(data.beta)}° (pitch)<br>
        Gamma (Y): ${Math.round(data.gamma)}° (roll)
    `;
    
    // Save orientation values for reference
    deviceOrientation.alpha = data.alpha;
    deviceOrientation.beta = data.beta;
    deviceOrientation.gamma = data.gamma;
    
    // Convert to radians
    const alphaRad = THREE.MathUtils.degToRad(data.alpha);
    const betaRad = THREE.MathUtils.degToRad(data.beta);
    const gammaRad = THREE.MathUtils.degToRad(data.gamma);
    
    // DIRECT QUATERNION APPROACH
    // Instead of using Euler angles which can have gimbal lock and discontinuities,
    // build the rotation directly from individual axis rotations
    
    // Create quaternions for each axis rotation
    const qx = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), betaRad);
    const qy = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), gammaRad);
    const qz = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), -alphaRad);
    
    // Create base quaternion
    const baseQuaternion = new THREE.Quaternion();
    
    // Combine rotations in the right order (y * x * z for our desired mapping)
    baseQuaternion.multiplyQuaternions(qy, qx);
    baseQuaternion.multiply(qz);
    
    // Apply fixed rotation to make screen face camera
    if (isPortraitMode) {
        // For portrait mode
        const fixedRotation = new THREE.Quaternion().setFromEuler(
            new THREE.Euler(Math.PI/2, 0, Math.PI/2, 'XYZ')
        );
        targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
    } else {
        // For landscape mode
        const fixedRotation = new THREE.Quaternion().setFromEuler(
            new THREE.Euler(Math.PI/2, 0, Math.PI, 'XYZ')
        );
        targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
    }
}
        
        // Reset phone orientation
        resetBtn.addEventListener('click', () => {
            // Reset orientation
            phoneGroup.quaternion.identity();
            
            // Reset device orientation
            deviceOrientation.alpha = 0;
            deviceOrientation.beta = 0;
            deviceOrientation.gamma = 0;
            
            // Reset target quaternion
            targetQuaternion.identity();
        });
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            // Check if phone is still sending data
            if (phoneConnected && Date.now() - lastPhoneUpdateTime > 5000) {
                phoneStatus.textContent = "Phone inactive";
                phoneStatus.className = "waiting";
                phoneConnected = false;
            }
            
            // Apply smooth rotation with quaternion slerp
            phoneGroup.quaternion.slerp(targetQuaternion, 0.1);
            
            // Render scene
            renderer.render(scene, camera);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Start the application
        initWebSocket();
        animate();
    </script>
</body>
</html>

----- [back3.js] -----

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Phone 3D Visualizer</title>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; }
        body { 
            overflow: hidden; 
            background-color: #161621;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: white;
        }
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.7);
            padding: 15px;
            border-radius: 10px;
            z-index: 100;
            max-width: 300px;
        }
        h1 {
            font-size: 20px;
            margin-bottom: 15px;
            color: #fff;
        }
        .status-line {
            margin-bottom: 8px;
            font-size: 14px;
        }
        .connected {
            color: #4cd964;
            font-weight: bold;
        }
        .waiting {
            color: #ffcc00;
            font-weight: bold;
        }
        .disconnected {
            color: #ff3b30;
            font-weight: bold;
        }
        .data-values {
            font-family: monospace;
            margin-top: 15px;
            background: rgba(255,255,255,0.1);
            padding: 10px;
            border-radius: 5px;
            font-size: 13px;
        }
        .controls {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .control-button {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .control-button:hover {
            background: rgba(255,255,255,0.3);
        }
        #resetBtn {
            background: rgba(255,59,48,0.6);
        }
        #resetBtn:hover {
            background: rgba(255,59,48,0.8);
        }
        #screenViewBtn {
            background: rgba(0,122,255,0.6);
        }
        #screenViewBtn:hover {
            background: rgba(0,122,255,0.8);
        }
        .mode-switch {
            margin-top: 15px;
        }
        #viewOptions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <div id="info">
        <h1>Phone Motion Visualizer</h1>
        <div class="status-line">
            Connection: <span id="connectionStatus" class="disconnected">Disconnected</span>
        </div>
        <div class="status-line">
            Phone Status: <span id="phoneStatus" class="waiting">Waiting for phone</span>
        </div>
        <div class="data-values" id="orientationValues">
            No data received
        </div>
        <div class="controls">
            <button id="resetBtn" class="control-button">Reset Position</button>
            <button id="screenViewBtn" class="control-button">Face Screen</button>
            <div class="mode-switch">
                <div>Orientation Mode:</div>
                <div id="viewOptions">
                    <button id="portraitBtn" class="control-button">Portrait</button>
                    <button id="landscapeBtn" class="control-button">Landscape</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // DOM Elements
        const connectionStatus = document.getElementById('connectionStatus');
        const phoneStatus = document.getElementById('phoneStatus');
        const orientationValues = document.getElementById('orientationValues');
        const resetBtn = document.getElementById('resetBtn');
        const screenViewBtn = document.getElementById('screenViewBtn');
        const portraitBtn = document.getElementById('portraitBtn');
        const landscapeBtn = document.getElementById('landscapeBtn');
        
        // Mode tracking
        let isPortraitMode = true;
        
        // THREE.js setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x161621);
        document.body.appendChild(renderer.domElement);
        
        // Create orbit controls for manual camera adjustment
        class OrbitControls {
            constructor(camera, domElement) {
                this.camera = camera;
                this.domElement = domElement;
                this.enabled = true;
                
                // Camera position in spherical coordinates
                this.spherical = new THREE.Spherical(5, Math.PI/3, Math.PI/4);
                
                // Initial target to orbit around
                this.target = new THREE.Vector3(0, 0, 0);
                
                // Events
                this.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));
                this.domElement.addEventListener('wheel', this.onMouseWheel.bind(this));
                document.addEventListener('mouseup', this.onMouseUp.bind(this));
                document.addEventListener('mousemove', this.onMouseMove.bind(this));
                
                this.update();
            }
            
            // Mouse controls
            onMouseDown(event) {
                if (!this.enabled) return;
                this.isMouseDown = true;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
            }
            
            onMouseUp() {
                this.isMouseDown = false;
            }
            
            onMouseMove(event) {
                if (!this.isMouseDown || !this.enabled) return;
                
                // Calculate mouse movement
                const deltaX = event.clientX - this.mouseX;
                const deltaY = event.clientY - this.mouseY;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
                
                // Update spherical coordinates
                this.spherical.theta -= deltaX * 0.01;
                this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi + deltaY * 0.01));
                
                this.update();
            }
            
            onMouseWheel(event) {
                if (!this.enabled) return;
                
                // Update radius based on scroll
                this.spherical.radius = Math.max(2, Math.min(10, this.spherical.radius + event.deltaY * 0.01));
                
                this.update();
            }
            
            update() {
                // Convert spherical to cartesian coordinates
                const sinPhiRadius = Math.sin(this.spherical.phi) * this.spherical.radius;
                
                this.camera.position.x = sinPhiRadius * Math.sin(this.spherical.theta) + this.target.x;
                this.camera.position.y = Math.cos(this.spherical.phi) * this.spherical.radius + this.target.y;
                this.camera.position.z = sinPhiRadius * Math.cos(this.spherical.theta) + this.target.z;
                
                this.camera.lookAt(this.target);
            }
        }
        
        const controls = new OrbitControls(camera, renderer.domElement);
        // Set initial position to face the phone's screen
        controls.spherical.theta = Math.PI/4;  // 45 degrees around
        controls.spherical.phi = Math.PI/2.5;  // Look slightly from above
        controls.spherical.radius = 6;         // Distance from the phone
        controls.update();
        
        // Add a grid for reference
        const gridHelper = new THREE.GridHelper(20, 20, 0x555555, 0x333333);
        scene.add(gridHelper);
        
        // Create a group for the phone
        const phoneGroup = new THREE.Group();
        
        // Create phone in portrait mode (default)
        function createPhoneModel(isPortrait = true) {
    // Clear existing phone
    while(phoneGroup.children.length > 0) {
        phoneGroup.remove(phoneGroup.children[0]);
    }
    
    // Phone body dimensions
    const dimensions = isPortrait ? 
        { width: 2.4, height: 5, depth: 0.4 } : // Portrait
        { width: 5, height: 2.4, depth: 0.4 };  // Landscape
    
    // Phone body - NOTE: For portrait, we swap width and height in BoxGeometry
    // to match the quaternion orientation handling
    const phoneGeometry = new THREE.BoxGeometry(
        isPortrait ? dimensions.width : dimensions.width,
        isPortrait ? dimensions.height : dimensions.depth,
        isPortrait ? dimensions.depth : dimensions.height
    );
    
    const phoneMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x333333, 
        shininess: 30
    });
    
    const phone = new THREE.Mesh(phoneGeometry, phoneMaterial);
    phoneGroup.add(phone);
    
    // Phone screen - also adjusted for correct dimensions
    const screenGeometry = new THREE.BoxGeometry(
        isPortrait ? dimensions.width * 0.94 : dimensions.width * 0.94,
        isPortrait ? dimensions.height * 0.94 : 0.05,
        isPortrait ? 0.05 : dimensions.height * 0.94
    );
    
    const screenMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x121240, // Slightly blue tint
        shininess: 100,
        emissive: 0x222244, // Blue emissive glow
        emissiveIntensity: 0.4
    });
    
    const screen = new THREE.Mesh(screenGeometry, screenMaterial);
    
    // Position screen correctly
    if (isPortrait) {
        screen.position.z = dimensions.depth/2 + 0.025; // Screen faces front (+Z)
    } else {
        screen.position.y = dimensions.depth/2 + 0.025; // Original code
    }
    
    phoneGroup.add(screen);
    
    // Camera (circle)
    const cameraGeometry = new THREE.CircleGeometry(0.15, 32);
    const cameraMaterial = new THREE.MeshPhongMaterial({ color: 0x111111 });
    const phoneCam = new THREE.Mesh(cameraGeometry, cameraMaterial);
    
    if (isPortrait) {
        phoneCam.position.z = dimensions.depth/2 + 0.026;
        phoneCam.position.y = dimensions.height/2 - 0.8;
        phoneCam.rotation.y = Math.PI; // Rotate to face forward
    } else {
        phoneCam.position.y = dimensions.depth/2 + 0.026;
        phoneCam.position.x = -dimensions.width/2 + 0.8;
        phoneCam.rotation.x = -Math.PI/2;
    }
    
    phoneGroup.add(phoneCam);
    
    // Add colored axes for reference
    const axesHelper = new THREE.AxesHelper(3);
    phoneGroup.add(axesHelper);
    
    return phoneGroup;
}
        
        // Create initial phone model
        createPhoneModel(isPortraitMode);
        scene.add(phoneGroup);
        
        // Set up lights
        const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
        scene.add(ambientLight);
        
        const keyLight = new THREE.DirectionalLight(0xffffff, 0.7);
        keyLight.position.set(1, 1, 2);
        scene.add(keyLight);
        
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
        fillLight.position.set(-1, 0.5, -1);
        scene.add(fillLight);
        
        // WebSocket connection
        let socket;
        let phoneConnected = false;
        let lastPhoneUpdateTime = 0;
        
        // Target orientation values
        const targetQuaternion = new THREE.Quaternion();
        const deviceOrientation = { alpha: 0, beta: 0, gamma: 0 };
        
        // Mode buttons
        portraitBtn.addEventListener('click', () => {
            isPortraitMode = true;
            createPhoneModel(true);
            portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            landscapeBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        landscapeBtn.addEventListener('click', () => {
            isPortraitMode = false;
            createPhoneModel(false);
            landscapeBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            portraitBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        // Screen View button
        screenViewBtn.addEventListener('click', () => {
    // Position camera directly in front of the screen
        controls.spherical.theta = 0;      // Directly in front
        controls.spherical.phi = Math.PI/2; // Level with the center
        controls.spherical.radius = 4.5;    // Close enough to see the screen
        controls.update();
    });
        
        // Set initial button state
        portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
        
        // Initialize WebSocket
        function initWebSocket() {
            socket = new WebSocket('wss://' + window.location.hostname + ':3000');
            
            socket.addEventListener('open', () => {
                connectionStatus.textContent = "Connected";
                connectionStatus.className = "connected";
                
                socket.send(JSON.stringify({
                    type: 'register',
                    client: 'viewer'
                }));
            });
            
            socket.addEventListener('message', (event) => {
                try {
                    const data = JSON.parse(event.data);
                    
                    if (data.type === 'orientation') {
                        handlePhoneOrientation(data);
                    } else if (data.type === 'phone_status') {
                        if (data.connected) {
                            phoneStatus.textContent = "Phone Connected";
                            phoneStatus.className = "connected";
                            phoneConnected = true;
                        } else {
                            phoneStatus.textContent = "Phone Disconnected";
                            phoneStatus.className = "disconnected";
                            phoneConnected = false;
                        }
                    }
                } catch (error) {
                    console.error('Error parsing message:', error);
                }
            });
            
            socket.addEventListener('close', () => {
                connectionStatus.textContent = "Disconnected";
                connectionStatus.className = "disconnected";
                setTimeout(initWebSocket, 3000);
            });
            
            socket.addEventListener('error', (error) => {
                console.error('WebSocket error:', error);
                connectionStatus.textContent = "Connection error";
                connectionStatus.className = "disconnected";
            });
        }
        
        // Map device orientation to 3D representation
        // Replace the handlePhoneOrientation function with this corrected version
// This maintains smoothness while fixing axis mapping

// Replace the handlePhoneOrientation function with this simplified version
// Using a more direct radian-based approach

// First, add these variables for smoother rotation
// Replace the handlePhoneOrientation function and add these variables

// Smoothing values for each axis (lower = smoother but less responsive)
const alphaSmoothness = 0.2;  // Z-axis rotation
const betaSmoothness = 0.2;   // X-axis rotation
const gammaSmoothness = 0.05; // Y-axis rotation (significantly reduced for gamma)

// Last orientation values
let lastOrientation = {
    alpha: 0,
    beta: 0,
    gamma: 0
};

// Flags for initialization
let isFirstReading = true;

// Extra filtering for gamma
const gammaFilter = {
    values: [],          // Array to store recent gamma values
    maxSize: 5,          // Number of recent values to track
    jumpThreshold: 0.5   // Threshold in radians to detect jumps
};

function handlePhoneOrientation(data) {
    // Update timestamp
    lastPhoneUpdateTime = Date.now();
    
    // Update UI
    orientationValues.innerHTML = `
        Alpha (Z): ${Math.round(data.alpha)}° (yaw)<br>
        Beta (X): ${Math.round(data.beta)}° (pitch)<br>
        Gamma (Y): ${Math.round(data.gamma)}° (roll)
    `;
    
    // Save orientation values for reference
    deviceOrientation.alpha = data.alpha;
    deviceOrientation.beta = data.beta;
    deviceOrientation.gamma = data.gamma;
    
    // Convert to radians
    const alphaRad = THREE.MathUtils.degToRad(data.alpha);
    const betaRad = THREE.MathUtils.degToRad(data.beta);
    const gammaRad = THREE.MathUtils.degToRad(data.gamma);
    
    // DIRECT QUATERNION APPROACH
    // Instead of using Euler angles which can have gimbal lock and discontinuities,
    // build the rotation directly from individual axis rotations
    
    // Create quaternions for each axis rotation
    const qx = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), betaRad);
    const qy = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), gammaRad);
    const qz = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), -alphaRad);
    
    // Create base quaternion
    const baseQuaternion = new THREE.Quaternion();
    
    // Combine rotations in the right order (y * x * z for our desired mapping)
    baseQuaternion.multiplyQuaternions(qy, qx);
    baseQuaternion.multiply(qz);
    
    // Apply fixed rotation to make screen face camera and correct initial orientation
    if (isPortraitMode) {
        // For portrait mode - FIXED to correct initial orientation (portrait upright)
        const fixedRotation = new THREE.Quaternion().setFromEuler(
            new THREE.Euler(0, 0, Math.PI/2, 'XYZ')
        );
        targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
    } else {
        // For landscape mode
        const fixedRotation = new THREE.Quaternion().setFromEuler(
            new THREE.Euler(0, 0, Math.PI, 'XYZ')
        );
        targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
    }
}

        
        // Reset phone orientation
        resetBtn.addEventListener('click', () => {
            // Reset orientation
            phoneGroup.quaternion.identity();
            
            // Reset device orientation
            deviceOrientation.alpha = 0;
            deviceOrientation.beta = 0;
            deviceOrientation.gamma = 0;
            
            // Reset target quaternion
            targetQuaternion.identity();
        });
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            // Check if phone is still sending data
            if (phoneConnected && Date.now() - lastPhoneUpdateTime > 5000) {
                phoneStatus.textContent = "Phone inactive";
                phoneStatus.className = "waiting";
                phoneConnected = false;
            }
            
            // Apply smooth rotation with quaternion slerp
            phoneGroup.quaternion.slerp(targetQuaternion, 0.1);
            
            // Render scene
            renderer.render(scene, camera);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Start the application
        initWebSocket();
        animate();
    </script>
</body>
</html>

----- [nearperfect.html] -----

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Phone 3D Visualizer</title>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; }
        body { 
            overflow: hidden; 
            background-color: #161621;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: white;
        }
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.7);
            padding: 15px;
            border-radius: 10px;
            z-index: 100;
            max-width: 300px;
            transition: background-color 0.2s ease;
        }
        h1 {
            font-size: 20px;
            margin-bottom: 15px;
            color: #fff;
        }
        .status-line {
            margin-bottom: 8px;
            font-size: 14px;
        }
        .connected {
            color: #4cd964;
            font-weight: bold;
        }
        .waiting {
            color: #ffcc00;
            font-weight: bold;
        }
        .disconnected {
            color: #ff3b30;
            font-weight: bold;
        }
        .data-values {
            font-family: monospace;
            margin-top: 15px;
            background: rgba(255,255,255,0.1);
            padding: 10px;
            border-radius: 5px;
            font-size: 13px;
        }
        .controls {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .control-button {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .control-button:hover {
            background: rgba(255,255,255,0.3);
        }
        #resetBtn {
            background: rgba(255,59,48,0.6);
        }
        #resetBtn:hover {
            background: rgba(255,59,48,0.8);
        }
        #screenViewBtn {
            background: rgba(0,122,255,0.6);
        }
        #screenViewBtn:hover {
            background: rgba(0,122,255,0.8);
        }
        .mode-switch {
            margin-top: 15px;
        }
        #viewOptions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <div id="info">
        <h1>Phone Motion Visualizer</h1>
        <div class="status-line">
            Connection: <span id="connectionStatus" class="disconnected">Disconnected</span>
        </div>
        <div class="status-line">
            Phone Status: <span id="phoneStatus" class="waiting">Waiting for phone</span>
        </div>
        <div class="data-values" id="orientationValues">
            No data received
        </div>
        <div class="controls">
            <button id="resetBtn" class="control-button">Reset Position</button>
            <button id="screenViewBtn" class="control-button">Face Screen</button>
            <div class="mode-switch">
                <div>Orientation Mode:</div>
                <div id="viewOptions">
                    <button id="portraitBtn" class="control-button">Portrait</button>
                    <button id="landscapeBtn" class="control-button">Landscape</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // DOM Elements
        const connectionStatus = document.getElementById('connectionStatus');
        const phoneStatus = document.getElementById('phoneStatus');
        const orientationValues = document.getElementById('orientationValues');
        const resetBtn = document.getElementById('resetBtn');
        const screenViewBtn = document.getElementById('screenViewBtn');
        const portraitBtn = document.getElementById('portraitBtn');
        const landscapeBtn = document.getElementById('landscapeBtn');
        
        // Mode tracking
        let isPortraitMode = true;
        
        // THREE.js setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x161621);
        document.body.appendChild(renderer.domElement);
        
        // Create orbit controls for manual camera adjustment
        class OrbitControls {
            constructor(camera, domElement) {
                this.camera = camera;
                this.domElement = domElement;
                this.enabled = true;
                
                // Camera position in spherical coordinates
                this.spherical = new THREE.Spherical(5, Math.PI/3, Math.PI/4);
                
                // Initial target to orbit around
                this.target = new THREE.Vector3(0, 0, 0);
                
                // Events
                this.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));
                this.domElement.addEventListener('wheel', this.onMouseWheel.bind(this));
                document.addEventListener('mouseup', this.onMouseUp.bind(this));
                document.addEventListener('mousemove', this.onMouseMove.bind(this));
                
                this.update();
            }
            
            // Mouse controls
            onMouseDown(event) {
                if (!this.enabled) return;
                this.isMouseDown = true;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
            }
            
            onMouseUp() {
                this.isMouseDown = false;
            }
            
            onMouseMove(event) {
                if (!this.isMouseDown || !this.enabled) return;
                
                // Calculate mouse movement
                const deltaX = event.clientX - this.mouseX;
                const deltaY = event.clientY - this.mouseY;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
                
                // Update spherical coordinates
                this.spherical.theta -= deltaX * 0.01;
                this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi + deltaY * 0.01));
                
                this.update();
            }
            
            onMouseWheel(event) {
                if (!this.enabled) return;
                
                // Update radius based on scroll
                this.spherical.radius = Math.max(2, Math.min(10, this.spherical.radius + event.deltaY * 0.01));
                
                this.update();
            }
            
            update() {
                // Convert spherical to cartesian coordinates
                const sinPhiRadius = Math.sin(this.spherical.phi) * this.spherical.radius;
                
                this.camera.position.x = sinPhiRadius * Math.sin(this.spherical.theta) + this.target.x;
                this.camera.position.y = Math.cos(this.spherical.phi) * this.spherical.radius + this.target.y;
                this.camera.position.z = sinPhiRadius * Math.cos(this.spherical.theta) + this.target.z;
                
                this.camera.lookAt(this.target);
            }
        }
        
        const controls = new OrbitControls(camera, renderer.domElement);
        
        // Set initial position to face the phone's screen directly (head-on) but further away
        controls.spherical.theta = 0;      // Directly in front
        controls.spherical.phi = Math.PI/2; // Level with the center
        controls.spherical.radius = 8;     // Further away from the phone
        controls.update();
        
        // Create a group for the phone
        const phoneGroup = new THREE.Group();
        
        // Create phone in portrait mode (default)
        function createPhoneModel(isPortrait = true) {
            // Clear existing phone
            while(phoneGroup.children.length > 0) {
                phoneGroup.remove(phoneGroup.children[0]);
            }
            
            // Phone body dimensions
            const dimensions = isPortrait ? 
                { width: 2.4, height: 5, depth: 0.4 } : // Portrait
                { width: 5, height: 2.4, depth: 0.4 };    // Landscape
            
            // Phone body - NOTE: For portrait, we swap width and height in BoxGeometry
            // to match the quaternion orientation handling
            const phoneGeometry = new THREE.BoxGeometry(
                isPortrait ? dimensions.width : dimensions.width,
                isPortrait ? dimensions.height : dimensions.depth,
                isPortrait ? dimensions.depth : dimensions.height
            );
            
            const phoneMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x333333, 
                shininess: 30
            });
            
            const phone = new THREE.Mesh(phoneGeometry, phoneMaterial);
            phoneGroup.add(phone);
            
            // Phone screen - also adjusted for correct dimensions
            const screenGeometry = new THREE.BoxGeometry(
                isPortrait ? dimensions.width * 0.94 : dimensions.width * 0.94,
                isPortrait ? dimensions.height * 0.94 : 0.05,
                isPortrait ? 0.05 : dimensions.height * 0.94
            );
            
            const screenMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x121240, // Slightly blue tint
                shininess: 100,
                emissive: 0x222244, // Blue emissive glow
                emissiveIntensity: 0.4
            });
            
            const screen = new THREE.Mesh(screenGeometry, screenMaterial);
            
            // Position screen correctly
            if (isPortrait) {
                screen.position.z = dimensions.depth/2 + 0.025; // Screen faces front (+Z)
            } else {
                screen.position.y = dimensions.depth/2 + 0.025; // Original code
            }
            
            phoneGroup.add(screen);
            
            // Camera (circle)
            const cameraGeometry = new THREE.CircleGeometry(0.15, 32);
            const cameraMaterial = new THREE.MeshPhongMaterial({ color: 0x111111 });
            const phoneCam = new THREE.Mesh(cameraGeometry, cameraMaterial);
            
            if (isPortrait) {
                phoneCam.position.z = dimensions.depth/2 + 0.026;
                phoneCam.position.y = dimensions.height/2 - 0.8;
                phoneCam.rotation.y = Math.PI; // Rotate to face forward
            } else {
                phoneCam.position.y = dimensions.depth/2 + 0.026;
                phoneCam.position.x = -dimensions.width/2 + 0.8;
                phoneCam.rotation.x = -Math.PI/2;
            }
            
            phoneGroup.add(phoneCam);
            
            // Add colored axes for reference
            const axesHelper = new THREE.AxesHelper(3);
            phoneGroup.add(axesHelper);
            
            return phoneGroup;
        }
        
        // Create initial phone model
        createPhoneModel(isPortraitMode);
        scene.add(phoneGroup);
        
        // Set up lights
        const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
        scene.add(ambientLight);
        
        const keyLight = new THREE.DirectionalLight(0xffffff, 0.7);
        keyLight.position.set(1, 1, 2);
        scene.add(keyLight);
        
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
        fillLight.position.set(-1, 0.5, -1);
        scene.add(fillLight);
        
        // WebSocket connection
        let socket;
        let phoneConnected = false;
        let lastPhoneUpdateTime = 0;
        
        // Target orientation values
        const targetQuaternion = new THREE.Quaternion();
        const deviceOrientation = { alpha: 0, beta: 0, gamma: 0 };
        
        // Physics variables for impulse behavior
        const physics = {
            velocity: new THREE.Vector3(0, 0, 0),  // Current velocity vector
            impulseThreshold: 5,                   // Lowered threshold to detect more subtle movements
            maxImpulse: 0.5,                       // Significantly reduced maximum impulse strength
            friction: 0.98,                        // Increased friction (higher = less friction)
            active: false,                         // Whether physics is currently active
            lastAccel: { x: 0, y: 0, z: 0 },       // Last acceleration values
            constrainTo2D: true,                   // Constrain movement to 2D (X and Y only)
            bounds: {                              // Screen boundaries
                minX: -8,
                maxX: 8,
                minY: -5,
                maxY: 5
            }
        };
        
        // Mode buttons
        portraitBtn.addEventListener('click', () => {
            isPortraitMode = true;
            createPhoneModel(true);
            portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            landscapeBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        landscapeBtn.addEventListener('click', () => {
            isPortraitMode = false;
            createPhoneModel(false);
            landscapeBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            portraitBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        // Screen View button
        screenViewBtn.addEventListener('click', () => {
            // Position camera directly in front of the screen
            controls.spherical.theta = 0;     // Directly in front
            controls.spherical.phi = Math.PI/2; // Level with the center
            controls.spherical.radius = 4;    // Close enough to see the screen
            controls.update();
        });
        
        // Set initial button state
        portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
        
        // Initialize WebSocket
        function initWebSocket() {
            socket = new WebSocket('wss://' + window.location.hostname + ':3000');
            
            socket.addEventListener('open', () => {
                connectionStatus.textContent = "Connected";
                connectionStatus.className = "connected";
                
                socket.send(JSON.stringify({
                    type: 'register',
                    client: 'viewer'
                }));
            });
            
            socket.addEventListener('message', (event) => {
                try {
                    const data = JSON.parse(event.data);
                    
                    if (data.type === 'orientation') {
                        handlePhoneOrientation(data);
                    } else if (data.type === 'motion') {
                        handlePhoneAcceleration(data);
                    } else if (data.type === 'phone_status') {
                        if (data.connected) {
                            phoneStatus.textContent = "Phone Connected";
                            phoneStatus.className = "connected";
                            phoneConnected = true;
                        } else {
                            phoneStatus.textContent = "Phone Disconnected";
                            phoneStatus.className = "disconnected";
                            phoneConnected = false;
                        }
                    }
                } catch (error) {
                    console.error('Error parsing message:', error);
                }
            });
            
            socket.addEventListener('close', () => {
                connectionStatus.textContent = "Disconnected";
                connectionStatus.className = "disconnected";
                setTimeout(initWebSocket, 3000);
            });
            
            socket.addEventListener('error', (error) => {
                console.error('WebSocket error:', error);
                connectionStatus.textContent = "Connection error";
                connectionStatus.className = "disconnected";
            });
        }
        
        // Smoothing values for each axis (lower = smoother but less responsive)
        const alphaSmoothness = 0.2;     // Z-axis rotation
        const betaSmoothness = 0.2;      // X-axis rotation
        const gammaSmoothness = 0.05;    // Y-axis rotation (significantly reduced for gamma)
        
        // Last orientation values
        let lastOrientation = {
            alpha: 0,
            beta: 0,
            gamma: 0
        };
        
        // Flags for initialization
        let isFirstReading = true;
        
        // Extra filtering for gamma
        const gammaFilter = {
            values: [],         // Array to store recent gamma values
            maxSize: 5,         // Number of recent values to track
            jumpThreshold: 0.5  // Threshold in radians to detect jumps
        };
        
        function handlePhoneOrientation(data) {
            // Update timestamp
            lastPhoneUpdateTime = Date.now();
            
            // Update UI
            orientationValues.innerHTML = `
                Alpha (Z): ${Math.round(data.alpha)}° (yaw)<br>
                Beta (X): ${Math.round(data.beta)}° (pitch)<br>
                Gamma (Y): ${Math.round(data.gamma)}° (roll)
            `;
            
            // Save orientation values for reference
            deviceOrientation.alpha = data.alpha;
            deviceOrientation.beta = data.beta;
            deviceOrientation.gamma = data.gamma;
            
            // Convert to radians
            const alphaRad = THREE.MathUtils.degToRad(data.alpha);
            const betaRad = THREE.MathUtils.degToRad(data.beta);
            const gammaRad = THREE.MathUtils.degToRad(data.gamma);
            
            // DIRECT QUATERNION APPROACH
            // Instead of using Euler angles which can have gimbal lock and discontinuities,
            // build the rotation directly from individual axis rotations
            
            // Create quaternions for each axis rotation
            const qx = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), betaRad);
            const qy = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), gammaRad);
            const qz = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), -alphaRad);
            
            // Create base quaternion
            const baseQuaternion = new THREE.Quaternion();
            
            // Combine rotations in the right order (y * x * z for our desired mapping)
            baseQuaternion.multiplyQuaternions(qy, qx);
            baseQuaternion.multiply(qz);
            
            // Apply fixed rotation to make screen face camera and correct initial orientation
            if (isPortraitMode) {
                // For portrait mode - FIXED to correct initial orientation (portrait upright)
                const fixedRotation = new THREE.Quaternion().setFromEuler(
                    new THREE.Euler(0, 0, Math.PI/2, 'XYZ')
                );
                targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
            } else {
                // For landscape mode
                const fixedRotation = new THREE.Quaternion().setFromEuler(
                    new THREE.Euler(0, 0, Math.PI, 'XYZ')
                );
                targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
            }
        }
        
        // Handle phone acceleration data for impulse behavior
        function handlePhoneAcceleration(data) {
            // Get acceleration values
            const accelX = data.accelerationX;
            const accelY = data.accelerationY;
            const accelZ = data.accelerationZ;
            
            // Calculate magnitude of acceleration change
            const deltaX = accelX - physics.lastAccel.x;
            const deltaY = accelY - physics.lastAccel.y;
            const deltaZ = accelZ - physics.lastAccel.z;
            
            // For 2D impulse, we'll focus on X and Y changes
            const accelMagnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            
            // Update acceleration values in UI
            updateAccelerationUI(accelX, accelY, accelZ);
            
            // If acceleration exceeds threshold, apply impulse
            if (accelMagnitude > physics.impulseThreshold) {
                // Mark physics as active
                physics.active = true;
                
                // Calculate impulse strength (clamped to maxImpulse)
                // Using a much gentler scaling factor (1/40 instead of 1/10)
                const impulseStrength = Math.min(accelMagnitude / 40, physics.maxImpulse);
                
                // For 2D impulse, we'll only apply to X and Y
                // Using smaller scaling factors for smoother motion
                physics.velocity.x += impulseStrength * (-deltaX / 20);
                physics.velocity.y += impulseStrength * (deltaY / 20);
                
                // Visual feedback - flash the info panel background
                const intensity = Math.min(1, impulseStrength / physics.maxImpulse);
                document.getElementById('info').style.backgroundColor = `rgba(${Math.round(255 * intensity)}, 100, 50, 0.7)`;
                setTimeout(() => {
                    document.getElementById('info').style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                }, 200);
            }
            
            // Update last acceleration values
            physics.lastAccel.x = accelX;
            physics.lastAccel.y = accelY;
            physics.lastAccel.z = accelZ;
        }
        
        // Add acceleration values to the orientation data display in the UI
        function updateAccelerationUI(accelX, accelY, accelZ) {
            // Calculate 2D velocity (XY plane only)
            const xyVelocity = Math.sqrt(physics.velocity.x * physics.velocity.x + physics.velocity.y * physics.velocity.y);
            
            const accelStr = `
                Accel X: ${accelX.toFixed(2)}<br>
                Accel Y: ${accelY.toFixed(2)}<br>
                Accel Z: ${accelZ.toFixed(2)}<br>
                XY Velocity: ${xyVelocity.toFixed(2)}
            `;
            
            // Add to the existing orientation values
            orientationValues.innerHTML += '<br><br>' + accelStr;
        }
        
        // Update physics calculations
        function updatePhysics() {
            // Only update if physics is active
            if (!physics.active) return;
            
            // Apply physics to phone position (constrained to 2D)
            phoneGroup.position.x += physics.velocity.x;
            phoneGroup.position.y += physics.velocity.y;
            if (!physics.constrainTo2D) {
                phoneGroup.position.z += physics.velocity.z;
            }
            
            // Apply friction to velocity
            physics.velocity.multiplyScalar(physics.friction);
            
            // If velocity is very small, stop physics
            if (physics.velocity.lengthSq() < 0.00005) {
                physics.velocity.set(0, 0, 0);
                physics.active = false;
            }
            
            // Add screen boundaries to make phone bounce from corners
            if (phoneGroup.position.x < physics.bounds.minX) {
                phoneGroup.position.x = physics.bounds.minX;
                physics.velocity.x *= -0.8; // Bounce with more energy loss
                
                // Add visual/audio feedback for bounce
                document.getElementById('info').style.backgroundColor = 'rgba(255, 100, 50, 0.7)';
                setTimeout(() => {
                    document.getElementById('info').style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                }, 200);
            }
            
            if (phoneGroup.position.x > physics.bounds.maxX) {
                phoneGroup.position.x = physics.bounds.maxX;
                physics.velocity.x *= -0.8;
                
                // Add visual/audio feedback for bounce
                document.getElementById('info').style.backgroundColor = 'rgba(255, 100, 50, 0.7)';
                setTimeout(() => {
                    document.getElementById('info').style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                }, 200);
            }
            
            if (phoneGroup.position.y < physics.bounds.minY) {
                phoneGroup.position.y = physics.bounds.minY;
                physics.velocity.y *= -0.8;
                
                // Add visual/audio feedback for bounce
                document.getElementById('info').style.backgroundColor = 'rgba(255, 100, 50, 0.7)';
                setTimeout(() => {
                    document.getElementById('info').style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                }, 200);
            }
            
            if (phoneGroup.position.y > physics.bounds.maxY) {
                phoneGroup.position.y = physics.bounds.maxY;
                physics.velocity.y *= -0.8;
                
                // Add visual/audio feedback for bounce
                document.getElementById('info').style.backgroundColor = 'rgba(255, 100, 50, 0.7)';
                setTimeout(() => {
                    document.getElementById('info').style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                }, 200);
            }
        }
        
        // Reset phone orientation
        resetBtn.addEventListener('click', () => {
            // Reset orientation
            phoneGroup.quaternion.identity();
            
            // Reset device orientation
            deviceOrientation.alpha = 0;
            deviceOrientation.beta = 0;
            deviceOrientation.gamma = 0;
            
            // Reset target quaternion
            targetQuaternion.identity();
            
            // Reset position and physics
            phoneGroup.position.set(0, 0, 0);
            physics.velocity.set(0, 0, 0);
            physics.active = false;
        });
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            // Check if phone is still sending data
            if (phoneConnected && Date.now() - lastPhoneUpdateTime > 5000) {
                phoneStatus.textContent = "Phone inactive";
                phoneStatus.className = "waiting";
                phoneConnected = false;
            }
            
            // Apply smooth rotation with quaternion slerp
            phoneGroup.quaternion.slerp(targetQuaternion, 0.1);
            
            // Update physics
            updatePhysics();
            
            // Render scene
            renderer.render(scene, camera);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Start the application
        initWebSocket();
        animate();
    </script>
</body>
</html>

----- [package.json] -----

{
  "dependencies": {
    "express": "^4.21.2",
    "ws": "^8.18.1"
  },
  "scripts": {
    "start": "node server",
    "dev": "node --watch server"
  }

}


----- [phone.js] -----

<!DOCTYPE html>
<html>
<head>
    <title>Direct Phone Controller</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
        }
        
        .container {
            max-width: 500px;
            margin: 0 auto;
            text-align: center;
        }
        
        h1 {
            color: #333;
        }
        
        button {
            background-color: #4285f4;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 16px;
            border-radius: 5px;
            margin: 20px 0;
            cursor: pointer;
        }
        
        button:disabled {
            background-color: #ccc;
        }
        
        .status-box {
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .data-row {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
            font-size: 14px;
        }
        
        .data-label {
            font-weight: bold;
        }
        
        #connectionStatus {
            font-weight: bold;
        }
        
        .connected {
            color: green;
        }
        
        .disconnected {
            color: red;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Phone Motion Controller</h1>
        
        <button id="startBtn">Start Motion Tracking</button>
        
        <div class="status-box">
            <div class="data-row">
                <span class="data-label">Connection:</span>
                <span id="connectionStatus" class="disconnected">Disconnected</span>
            </div>
        </div>
        
        <div class="status-box">
            <div class="data-row">
                <span class="data-label">Acceleration X:</span>
                <span id="accelX">0</span>
            </div>
            <div class="data-row">
                <span class="data-label">Acceleration Y:</span>
                <span id="accelY">0</span>
            </div>
            <div class="data-row">
                <span class="data-label">Acceleration Z:</span>
                <span id="accelZ">0</span>
            </div>
            <div class="data-row">
                <span class="data-label">Updates:</span>
                <span id="updateCount">0</span>
            </div>
        </div>
        
        <!-- New section for orientation data -->
        <div class="status-box">
            <div class="data-row">
                <span class="data-label">Alpha (Z):</span>
                <span id="alphaValue">0</span>
            </div>
            <div class="data-row">
                <span class="data-label">Beta (X):</span>
                <span id="betaValue">0</span>
            </div>
            <div class="data-row">
                <span class="data-label">Gamma (Y):</span>
                <span id="gammaValue">0</span>
            </div>
        </div>
    </div>

    <script>
        // Elements
        const startBtn = document.getElementById('startBtn');
        const connectionStatus = document.getElementById('connectionStatus');
        const accelX = document.getElementById('accelX');
        const accelY = document.getElementById('accelY');
        const accelZ = document.getElementById('accelZ');
        const updateCount = document.getElementById('updateCount');
        const alphaValue = document.getElementById('alphaValue');
        const betaValue = document.getElementById('betaValue');
        const gammaValue = document.getElementById('gammaValue');
        
        // Variables
        let socket = null;
        let isTracking = false;
        let updateCounter = 0;
        
        // Initialize WebSocket
        function connectWebSocket() {
            socket = new WebSocket('wss://' + window.location.hostname + ':3000');
            
            socket.onopen = function() {
                connectionStatus.textContent = 'Connected';
                connectionStatus.className = 'connected';
                
                // Register as phone
                socket.send(JSON.stringify({
                    type: 'register',
                    client: 'phone'
                }));
            };
            
            socket.onclose = function() {
                connectionStatus.textContent = 'Disconnected';
                connectionStatus.className = 'disconnected';
                setTimeout(connectWebSocket, 2000);
            };
            
            socket.onerror = function(error) {
                console.error('WebSocket error:', error);
                connectionStatus.textContent = 'Error';
                connectionStatus.className = 'disconnected';
            };
        }
        
        // Start motion tracking
        function startMotionTracking() {
            if (isTracking) return;
            
            window.addEventListener('devicemotion', handleMotion);
            window.addEventListener('deviceorientation', handleOrientation);
            isTracking = true;
            startBtn.disabled = true;
            startBtn.textContent = 'Motion Tracking Active';
        }
        
        // Handle motion event
        function handleMotion(event) {
            if (!socket || socket.readyState !== WebSocket.OPEN) return;
            
            // Get acceleration data
            const acceleration = event.accelerationIncludingGravity || event.acceleration || { x: 0, y: 0, z: 0 };
            const x = acceleration.x || 0;
            const y = acceleration.y || 0;
            const z = acceleration.z || 0;
            
            // Update UI
            accelX.textContent = x.toFixed(2);
            accelY.textContent = y.toFixed(2);
            accelZ.textContent = z.toFixed(2);
            updateCounter++;
            updateCount.textContent = updateCounter;
            
            // Send to server
            socket.send(JSON.stringify({
                type: 'motion',
                accelerationX: x,
                accelerationY: y,
                accelerationZ: z,
                timestamp: Date.now()
            }));
        }
        
        // Handle orientation event
        function handleOrientation(event) {
            if (!socket || socket.readyState !== WebSocket.OPEN) return;
            
            // Get orientation data
            const alpha = event.alpha || 0;  // Z-axis rotation [0,360)
            const beta = event.beta || 0;    // X-axis rotation [-180,180]
            const gamma = event.gamma || 0;  // Y-axis rotation [-90,90]
            
            // Update UI
            alphaValue.textContent = alpha.toFixed(2);
            betaValue.textContent = beta.toFixed(2);
            gammaValue.textContent = gamma.toFixed(2);
            
            // Send to server
            socket.send(JSON.stringify({
                type: 'orientation',
                alpha: alpha,
                beta: beta,
                gamma: gamma,
                timestamp: Date.now()
            }));
        }
        
        // Start button event
        startBtn.addEventListener('click', function() {
            // iOS requires permission request for both motion and orientation
            if (typeof DeviceMotionEvent.requestPermission === 'function' || 
                typeof DeviceOrientationEvent.requestPermission === 'function') {
                
                // Request motion permission first if available
                const motionPromise = typeof DeviceMotionEvent.requestPermission === 'function' ? 
                    DeviceMotionEvent.requestPermission() : 
                    Promise.resolve('granted');
                
                motionPromise.then(function(motionState) {
                    if (motionState !== 'granted') {
                        alert('Permission denied for motion sensors');
                        return;
                    }
                    
                    // Then request orientation permission if available
                    const orientationPromise = typeof DeviceOrientationEvent.requestPermission === 'function' ? 
                        DeviceOrientationEvent.requestPermission() : 
                        Promise.resolve('granted');
                    
                    return orientationPromise;
                })
                .then(function(orientationState) {
                    if (orientationState === 'granted') {
                        connectWebSocket();
                        startMotionTracking();
                    } else {
                        alert('Permission denied for orientation sensors');
                    }
                })
                .catch(function(error) {
                    console.error('Error requesting permissions:', error);
                    alert('Error requesting sensor permissions');
                });
            } else {
                // Non-iOS devices
                connectWebSocket();
                startMotionTracking();
            }
        });
    </script>
</body>
</html>

----- [se.js] -----

const express = require('express');
const https = require('https');
const path = require('path');
const fs = require('fs');
const WebSocket = require('ws');

// Express app setup
const app = express();
const PORT = process.env.PORT || 3000;

// SSL options
const sslOptions = {
    key: fs.readFileSync(path.join(__dirname, 'server.key')),
    cert: fs.readFileSync(path.join(__dirname, 'server.cert'))
};

// Create HTTPS server
const server = https.createServer(sslOptions, app);

// Set up WebSocket server
const wss = new WebSocket.Server({ server });

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// Routes
app.get('/', (req, res) => {
    res.redirect('/phone');
});

app.get('/phone', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'phone.html'));
});

app.get('/desktop', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'desktop.html'));
});

// Client tracking
let viewers = new Set();
let phones = new Set();

// WebSocket server logic
wss.on('connection', (ws) => {
    console.log('New client connected');
    
    // Handle client registration
    let clientType = null;
    
    // Handle messages
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            
            // Handle client registration
            if (data.type === 'register') {
                if (data.client === 'viewer') {
                    clientType = 'viewer';
                    viewers.add(ws);
                    console.log(`Viewer registered. Total viewers: ${viewers.size}`);
                    
                    // Notify viewer about phone status
                    ws.send(JSON.stringify({
                        type: 'phone_status',
                        connected: phones.size > 0
                    }));
                } 
                else if (data.client === 'phone') {
                    clientType = 'phone';
                    phones.add(ws);
                    console.log(`Phone registered. Total phones: ${phones.size}`);
                    
                    // Notify all viewers about new phone
                    broadcastToViewers({
                        type: 'phone_status',
                        connected: true
                    });
                }
            }
            // Forward orientation data to all viewers
            else if (data.type === 'orientation' && clientType === 'phone') {
                broadcastToViewers(data);
            }
        } catch (error) {
            console.error('Error processing message:', error);
        }
    });
    
    // Handle client disconnection
    ws.on('close', () => {
        console.log('Client disconnected');
        
        if (clientType === 'viewer') {
            viewers.delete(ws);
            console.log(`Viewer disconnected. Remaining viewers: ${viewers.size}`);
        } 
        else if (clientType === 'phone') {
            phones.delete(ws);
            console.log(`Phone disconnected. Remaining phones: ${phones.size}`);
            
            // Notify all viewers about phone disconnection
            broadcastToViewers({
                type: 'phone_status',
                connected: phones.size > 0
            });
        }
    });
    
    // Handle errors
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

// Helper function to broadcast to all viewers
function broadcastToViewers(data) {
    viewers.forEach(viewer => {
        if (viewer.readyState === WebSocket.OPEN) {
            viewer.send(JSON.stringify(data));
        }
    });
}

// Start server
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
    🚀 Phone Motion Tracking Server
    -------------------------------
    • Server running on port ${PORT}
    • Phone interface: https://localhost:${PORT}/phone
    • Desktop viewer: https://localhost:${PORT}/desktop
    `);
});

----- [server.js] -----

const express = require('express');
const https = require('https');
const path = require('path');
const fs = require('fs');
const WebSocket = require('ws');

// Express app setup
const app = express();
const PORT = process.env.PORT || 3000;

// SSL options
const sslOptions = {
    key: fs.readFileSync(path.join(__dirname, 'server.key')),
    cert: fs.readFileSync(path.join(__dirname, 'server.cert'))
};

// Create HTTPS server
const server = https.createServer(sslOptions, app);

// Set up WebSocket server
const wss = new WebSocket.Server({ server });

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// Routes
app.get('/', (req, res) => {
    res.redirect('/phone');
});

app.get('/phone', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'phone.html'));
});

app.get('/desktop', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'desktop.html'));
});

// Client tracking
let viewers = new Set();
let phones = new Set();

// WebSocket server logic
wss.on('connection', (ws) => {
    console.log('New client connected');
    
    // Handle client registration
    let clientType = null;
    
    // Handle messages
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            
            // Handle client registration
            if (data.type === 'register') {
                if (data.client === 'viewer') {
                    clientType = 'viewer';
                    viewers.add(ws);
                    console.log(`Viewer registered. Total viewers: ${viewers.size}`);
                    
                    // Notify viewer about phone status
                    ws.send(JSON.stringify({
                        type: 'phone_status',
                        connected: phones.size > 0
                    }));
                } 
                else if (data.client === 'phone') {
                    clientType = 'phone';
                    phones.add(ws);
                    console.log(`Phone registered. Total phones: ${phones.size}`);
                    
                    // Notify all viewers about new phone
                    broadcastToViewers({
                        type: 'phone_status',
                        connected: true
                    });
                }
            }
            // Forward orientation data to all viewers
            else if (data.type === 'orientation' && clientType === 'phone') {
                broadcastToViewers(data);
            }
            // Forward motion (acceleration) data to all viewers
            else if (data.type === 'motion' && clientType === 'phone') {
                broadcastToViewers(data);
            }
        } catch (error) {
            console.error('Error processing message:', error);
        }
    });
    
    // Handle client disconnection
    ws.on('close', () => {
        console.log('Client disconnected');
        
        if (clientType === 'viewer') {
            viewers.delete(ws);
            console.log(`Viewer disconnected. Remaining viewers: ${viewers.size}`);
        } 
        else if (clientType === 'phone') {
            phones.delete(ws);
            console.log(`Phone disconnected. Remaining phones: ${phones.size}`);
            
            // Notify all viewers about phone disconnection
            broadcastToViewers({
                type: 'phone_status',
                connected: phones.size > 0
            });
        }
    });
    
    // Handle errors
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

// Helper function to broadcast to all viewers
function broadcastToViewers(data) {
    viewers.forEach(viewer => {
        if (viewer.readyState === WebSocket.OPEN) {
            viewer.send(JSON.stringify(data));
        }
    });
}

// Start server
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
    🚀 Phone Motion Tracking Server
    -------------------------------
    • Server running on port ${PORT}
    • Phone interface: https://localhost:${PORT}/phone
    • Desktop viewer: https://localhost:${PORT}/desktop
    `);
});

----- [ss.js] -----

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Phone 3D Visualizer</title>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; }
        body { 
            overflow: hidden; 
            background-color: #161621;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: white;
        }
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.7);
            padding: 15px;
            border-radius: 10px;
            z-index: 100;
            max-width: 300px;
        }
        h1 {
            font-size: 20px;
            margin-bottom: 15px;
            color: #fff;
        }
        .status-line {
            margin-bottom: 8px;
            font-size: 14px;
        }
        .connected {
            color: #4cd964;
            font-weight: bold;
        }
        .waiting {
            color: #ffcc00;
            font-weight: bold;
        }
        .disconnected {
            color: #ff3b30;
            font-weight: bold;
        }
        .data-values {
            font-family: monospace;
            margin-top: 15px;
            background: rgba(255,255,255,0.1);
            padding: 10px;
            border-radius: 5px;
            font-size: 13px;
        }
        .controls {
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .control-button {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .control-button:hover {
            background: rgba(255,255,255,0.3);
        }
        #resetBtn {
            background: rgba(255,59,48,0.6);
        }
        #resetBtn:hover {
            background: rgba(255,59,48,0.8);
        }
        #screenViewBtn {
            background: rgba(0,122,255,0.6);
        }
        #screenViewBtn:hover {
            background: rgba(0,122,255,0.8);
        }
        .mode-switch {
            margin-top: 15px;
        }
        #viewOptions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <div id="info">
        <h1>Phone Motion Visualizer</h1>
        <div class="status-line">
            Connection: <span id="connectionStatus" class="disconnected">Disconnected</span>
        </div>
        <div class="status-line">
            Phone Status: <span id="phoneStatus" class="waiting">Waiting for phone</span>
        </div>
        <div class="data-values" id="orientationValues">
            No data received
        </div>
        <div class="controls">
            <button id="resetBtn" class="control-button">Reset Position</button>
            <button id="screenViewBtn" class="control-button">Face Screen</button>
            <div class="mode-switch">
                <div>Orientation Mode:</div>
                <div id="viewOptions">
                    <button id="portraitBtn" class="control-button">Portrait</button>
                    <button id="landscapeBtn" class="control-button">Landscape</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // DOM Elements
        const connectionStatus = document.getElementById('connectionStatus');
        const phoneStatus = document.getElementById('phoneStatus');
        const orientationValues = document.getElementById('orientationValues');
        const resetBtn = document.getElementById('resetBtn');
        const screenViewBtn = document.getElementById('screenViewBtn');
        const portraitBtn = document.getElementById('portraitBtn');
        const landscapeBtn = document.getElementById('landscapeBtn');
        
        // Mode tracking
        let isPortraitMode = true;
        
        // THREE.js setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x161621);
        document.body.appendChild(renderer.domElement);
        
        // Create orbit controls for manual camera adjustment
        class OrbitControls {
            constructor(camera, domElement) {
                this.camera = camera;
                this.domElement = domElement;
                this.enabled = true;
                
                // Camera position in spherical coordinates
                this.spherical = new THREE.Spherical(5, Math.PI/3, Math.PI/4);
                
                // Initial target to orbit around
                this.target = new THREE.Vector3(0, 0, 0);
                
                // Events
                this.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));
                this.domElement.addEventListener('wheel', this.onMouseWheel.bind(this));
                document.addEventListener('mouseup', this.onMouseUp.bind(this));
                document.addEventListener('mousemove', this.onMouseMove.bind(this));
                
                this.update();
            }
            
            // Mouse controls
            onMouseDown(event) {
                if (!this.enabled) return;
                this.isMouseDown = true;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
            }
            
            onMouseUp() {
                this.isMouseDown = false;
            }
            
            onMouseMove(event) {
                if (!this.isMouseDown || !this.enabled) return;
                
                // Calculate mouse movement
                const deltaX = event.clientX - this.mouseX;
                const deltaY = event.clientY - this.mouseY;
                this.mouseX = event.clientX;
                this.mouseY = event.clientY;
                
                // Update spherical coordinates
                this.spherical.theta -= deltaX * 0.01;
                this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi + deltaY * 0.01));
                
                this.update();
            }
            
            onMouseWheel(event) {
                if (!this.enabled) return;
                
                // Update radius based on scroll
                this.spherical.radius = Math.max(2, Math.min(10, this.spherical.radius + event.deltaY * 0.01));
                
                this.update();
            }
            
            update() {
                // Convert spherical to cartesian coordinates
                const sinPhiRadius = Math.sin(this.spherical.phi) * this.spherical.radius;
                
                this.camera.position.x = sinPhiRadius * Math.sin(this.spherical.theta) + this.target.x;
                this.camera.position.y = Math.cos(this.spherical.phi) * this.spherical.radius + this.target.y;
                this.camera.position.z = sinPhiRadius * Math.cos(this.spherical.theta) + this.target.z;
                
                this.camera.lookAt(this.target);
            }
        }
        
        const controls = new OrbitControls(camera, renderer.domElement);
        // Set initial position to face the phone's screen
        controls.spherical.theta = Math.PI/4;  // 45 degrees around
        controls.spherical.phi = Math.PI/2.5;  // Look slightly from above
        controls.spherical.radius = 6;         // Distance from the phone
        controls.update();
        
        // Add a grid for reference
        const gridHelper = new THREE.GridHelper(20, 20, 0x555555, 0x333333);
        scene.add(gridHelper);
        
        // Create a group for the phone
        const phoneGroup = new THREE.Group();
        
        // Create phone in portrait mode (default)
        function createPhoneModel(isPortrait = true) {
    // Clear existing phone
    while(phoneGroup.children.length > 0) {
        phoneGroup.remove(phoneGroup.children[0]);
    }
    
    // Phone body dimensions
    const dimensions = isPortrait ? 
        { width: 2.4, height: 5, depth: 0.4 } : // Portrait
        { width: 5, height: 2.4, depth: 0.4 };  // Landscape
    
    // Phone body - NOTE: For portrait, we swap width and height in BoxGeometry
    // to match the quaternion orientation handling
    const phoneGeometry = new THREE.BoxGeometry(
        isPortrait ? dimensions.width : dimensions.width,
        isPortrait ? dimensions.height : dimensions.depth,
        isPortrait ? dimensions.depth : dimensions.height
    );
    
    const phoneMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x333333, 
        shininess: 30
    });
    
    const phone = new THREE.Mesh(phoneGeometry, phoneMaterial);
    phoneGroup.add(phone);
    
    // Phone screen - also adjusted for correct dimensions
    const screenGeometry = new THREE.BoxGeometry(
        isPortrait ? dimensions.width * 0.94 : dimensions.width * 0.94,
        isPortrait ? dimensions.height * 0.94 : 0.05,
        isPortrait ? 0.05 : dimensions.height * 0.94
    );
    
    const screenMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x121240, // Slightly blue tint
        shininess: 100,
        emissive: 0x222244, // Blue emissive glow
        emissiveIntensity: 0.4
    });
    
    const screen = new THREE.Mesh(screenGeometry, screenMaterial);
    
    // Position screen correctly
    if (isPortrait) {
        screen.position.z = dimensions.depth/2 + 0.025; // Screen faces front (+Z)
    } else {
        screen.position.y = dimensions.depth/2 + 0.025; // Original code
    }
    
    phoneGroup.add(screen);
    
    // Camera (circle)
    const cameraGeometry = new THREE.CircleGeometry(0.15, 32);
    const cameraMaterial = new THREE.MeshPhongMaterial({ color: 0x111111 });
    const phoneCam = new THREE.Mesh(cameraGeometry, cameraMaterial);
    
    if (isPortrait) {
        phoneCam.position.z = dimensions.depth/2 + 0.026;
        phoneCam.position.y = dimensions.height/2 - 0.8;
        phoneCam.rotation.y = Math.PI; // Rotate to face forward
    } else {
        phoneCam.position.y = dimensions.depth/2 + 0.026;
        phoneCam.position.x = -dimensions.width/2 + 0.8;
        phoneCam.rotation.x = -Math.PI/2;
    }
    
    phoneGroup.add(phoneCam);
    
    // Add colored axes for reference
    const axesHelper = new THREE.AxesHelper(3);
    phoneGroup.add(axesHelper);
    
    return phoneGroup;
}
        
        // Create initial phone model
        createPhoneModel(isPortraitMode);
        scene.add(phoneGroup);
        
        // Set up lights
        const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
        scene.add(ambientLight);
        
        const keyLight = new THREE.DirectionalLight(0xffffff, 0.7);
        keyLight.position.set(1, 1, 2);
        scene.add(keyLight);
        
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
        fillLight.position.set(-1, 0.5, -1);
        scene.add(fillLight);
        
        // WebSocket connection
        let socket;
        let phoneConnected = false;
        let lastPhoneUpdateTime = 0;
        
        // Target orientation values
        const targetQuaternion = new THREE.Quaternion();
        const deviceOrientation = { alpha: 0, beta: 0, gamma: 0 };
        
        // Mode buttons
        portraitBtn.addEventListener('click', () => {
            isPortraitMode = true;
            createPhoneModel(true);
            portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            landscapeBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        landscapeBtn.addEventListener('click', () => {
            isPortraitMode = false;
            createPhoneModel(false);
            landscapeBtn.style.background = 'rgba(76, 217, 100, 0.4)';
            portraitBtn.style.background = 'rgba(255, 255, 255, 0.2)';
        });
        
        // Screen View button
        screenViewBtn.addEventListener('click', () => {
    // Position camera directly in front of the screen
        controls.spherical.theta = 0;      // Directly in front
        controls.spherical.phi = Math.PI/2; // Level with the center
        controls.spherical.radius = 4.5;    // Close enough to see the screen
        controls.update();
    });
        
        // Set initial button state
        portraitBtn.style.background = 'rgba(76, 217, 100, 0.4)';
        
        // Initialize WebSocket
        function initWebSocket() {
            socket = new WebSocket('wss://' + window.location.hostname + ':3000');
            
            socket.addEventListener('open', () => {
                connectionStatus.textContent = "Connected";
                connectionStatus.className = "connected";
                
                socket.send(JSON.stringify({
                    type: 'register',
                    client: 'viewer'
                }));
            });
            
            socket.addEventListener('message', (event) => {
                try {
                    const data = JSON.parse(event.data);
                    
                    if (data.type === 'orientation') {
                        handlePhoneOrientation(data);
                    } else if (data.type === 'phone_status') {
                        if (data.connected) {
                            phoneStatus.textContent = "Phone Connected";
                            phoneStatus.className = "connected";
                            phoneConnected = true;
                        } else {
                            phoneStatus.textContent = "Phone Disconnected";
                            phoneStatus.className = "disconnected";
                            phoneConnected = false;
                        }
                    }
                } catch (error) {
                    console.error('Error parsing message:', error);
                }
            });
            
            socket.addEventListener('close', () => {
                connectionStatus.textContent = "Disconnected";
                connectionStatus.className = "disconnected";
                setTimeout(initWebSocket, 3000);
            });
            
            socket.addEventListener('error', (error) => {
                console.error('WebSocket error:', error);
                connectionStatus.textContent = "Connection error";
                connectionStatus.className = "disconnected";
            });
        }
        
        // Map device orientation to 3D representation
        // Replace the handlePhoneOrientation function with this corrected version
// This maintains smoothness while fixing axis mapping

// Replace the handlePhoneOrientation function with this simplified version
// Using a more direct radian-based approach

// First, add these variables for smoother rotation
// Replace the handlePhoneOrientation function and add these variables

// Smoothing values for each axis (lower = smoother but less responsive)
// const alphaSmoothness = 0.2;  // Z-axis rotation
// const betaSmoothness = 0.2;   // X-axis rotation
// const gammaSmoothness = 0.05; // Y-axis rotation (significantly reduced for gamma)

// // Last orientation values
// let lastOrientation = {
//     alpha: 0,
//     beta: 0,
//     gamma: 0
// };

// // Flags for initialization
// let isFirstReading = true;

// // Extra filtering for gamma
// const gammaFilter = {
//     values: [],          // Array to store recent gamma values
//     maxSize: 5,          // Number of recent values to track
//     jumpThreshold: 0.5   // Threshold in radians to detect jumps
// };

// Replace the handlePhoneOrientation function with this adjusted version

function handlePhoneOrientation(data) {
    // Update timestamp
    lastPhoneUpdateTime = Date.now();
    
    // Update UI
    orientationValues.innerHTML = `
        Alpha (Z): ${Math.round(data.alpha)}° (yaw)<br>
        Beta (X): ${Math.round(data.beta)}° (pitch)<br>
        Gamma (Y): ${Math.round(data.gamma)}° (roll)
    `;
    
    // Save orientation values for reference
    deviceOrientation.alpha = data.alpha;
    deviceOrientation.beta = data.beta;
    deviceOrientation.gamma = data.gamma;
    
    // Convert to radians
    const alphaRad = THREE.MathUtils.degToRad(data.alpha);
    
    // ADJUST BETA: Subtract 90 degrees to make beta=0 the upright position
    // (This effectively shifts the coordinate system)
    const betaRad = THREE.MathUtils.degToRad(data.beta - 90);
    
    const gammaRad = THREE.MathUtils.degToRad(data.gamma);
    
    // DIRECT QUATERNION APPROACH
    // Create quaternions for each axis rotation
    const qx = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), betaRad);
    const qy = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), gammaRad);
    const qz = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), -alphaRad);
    
    // Create base quaternion
    const baseQuaternion = new THREE.Quaternion();
    
    // Combine rotations in the right order
    baseQuaternion.multiplyQuaternions(qy, qx);
    baseQuaternion.multiply(qz);
    
    // Apply fixed rotation to make screen face camera and maintain portrait orientation
    if (isPortraitMode) {
        // For portrait mode
        const fixedRotation = new THREE.Quaternion().setFromEuler(
            new THREE.Euler(0, 0, Math.PI/2, 'XYZ')
        );
        targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
    } else {
        // For landscape mode
        const fixedRotation = new THREE.Quaternion().setFromEuler(
            new THREE.Euler(0, 0, Math.PI, 'XYZ')
        );
        targetQuaternion.copy(baseQuaternion).multiply(fixedRotation);
    }
}

        
        // Reset phone orientation
        resetBtn.addEventListener('click', () => {
            // Reset orientation
            phoneGroup.quaternion.identity();
            
            // Reset device orientation
            deviceOrientation.alpha = 0;
            deviceOrientation.beta = 0;
            deviceOrientation.gamma = 0;
            
            // Reset target quaternion
            targetQuaternion.identity();
        });
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            // Check if phone is still sending data
            if (phoneConnected && Date.now() - lastPhoneUpdateTime > 5000) {
                phoneStatus.textContent = "Phone inactive";
                phoneStatus.className = "waiting";
                phoneConnected = false;
            }
            
            // Apply smooth rotation with quaternion slerp
            phoneGroup.quaternion.slerp(targetQuaternion, 0.1);
            
            // Render scene
            renderer.render(scene, camera);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Start the application
        initWebSocket();
        animate();
    </script>
</body>
</html>